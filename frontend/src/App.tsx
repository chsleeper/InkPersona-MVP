import React, { useEffect, useMemo, useRef, useState, useCallback } from "react";
import { Bold, Italic, Strikethrough, Code, Quote, List, ListOrdered, Link, Image, Table, Eye, EyeOff, Download, Upload, Maximize2, Minimize2, FileText, BookOpen, Save, Settings, Moon, Sun, Palette, Plus, X, Menu, Hash, Clock, FileType, RefreshCw, Wand2, Sparkles } from "lucide-react";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import rehypeRaw from "rehype-raw";
import rehypeHighlight from "rehype-highlight";

const sample = `---
title: ÊàëÁöÑÁ¨¨‰∏ÄÁØáÁ¨îËÆ∞
tags: [‰∫ßÂìÅËßÑÂàí, ËÆæËÆ°, Á†îÂèë]
created: ${new Date().toISOString()}
---

# ‰Ω†Â•ΩÔºåInkPersonaÔºÅ

> ËøôÊòØ‰∏Ä‰∏™**Êúâ‰∏™ÊÄß**ÁöÑÁºñËæëÂô® MVPÔºö
> - Slash ÂëΩ‰ª§: ËæìÂÖ• "/" ËØïËØïÁúã
> - Á¶ÖÊ®°Âºè: Âè≥‰∏äËßíÂàáÊç¢
> - ‰∏ªÈ¢òÂàáÊç¢: ÊîØÊåÅÊòéÊöó‰∏ªÈ¢ò

## ‰ª£Á†Å

\`\`\`js
function hello(name){
  console.log(\`Hello, \${name}!\`);
}
\`\`\`

## Ë°®Ê†º

| Ê®°Âùó | Áä∂ÊÄÅ | Â§áÊ≥® |
|---|---|---|
| Ê∏≤Êüì | ‚úÖ | react-markdown + gfm |
| È¢ÑËßà | ‚úÖ | ÊîØÊåÅ‰ª£Á†ÅÈ´ò‰∫Æ |
| ÂØºÂá∫ | ‚úÖ | .md / .html |

![Á§∫ÊÑèÂõæ](https://images.unsplash.com/photo-1551033406-611cf9a28f67?w=800&h=240&fit=crop&auto=format)
`;

type Tool = {
  key: string;
  icon: any;
  tip: string;
  wrap?: [string, string];
  insert?: string;
  prefix?: string;
  template?: string;
  action?: string;
};

type Document = {
  id: string;
  title: string;
  content: string;
  created: Date;
  modified: Date;
};

type TOCItem = {
  level: number;
  text: string;
  id: string;
};

const TOOLBAR: Tool[] = [
  { key: "bold", icon: Bold, tip: "Á≤ó‰Ωì (Ctrl+B)", wrap: ["**", "**"], insert: "Âä†Á≤óÊñáÊú¨" },
  { key: "italic", icon: Italic, tip: "Êñú‰Ωì (Ctrl+I)", wrap: ["*", "*"], insert: "Êñú‰ΩìÊñáÊú¨" },
  { key: "strike", icon: Strikethrough, tip: "Âà†Èô§Á∫ø", wrap: ["~~", "~~"], insert: "Âà†Èô§Á∫øÊñáÊú¨" },
  { key: "code", icon: Code, tip: "Ë°åÂÜÖ‰ª£Á†Å", wrap: ["`", "`"], insert: "‰ª£Á†Å" },
  { key: "quote", icon: Quote, tip: "ÂºïÁî®", prefix: "> ", insert: "ÂºïÁî®ÂÜÖÂÆπ" },
  { key: "ul", icon: List, tip: "Êó†Â∫èÂàóË°®", prefix: "- ", insert: "ÂàóË°®È°π" },
  { key: "ol", icon: ListOrdered, tip: "ÊúâÂ∫èÂàóË°®", prefix: "1. ", insert: "ÂàóË°®È°π" },
  { key: "link", icon: Link, tip: "ÈìæÊé• (Ctrl+K)", template: "[ÈìæÊé•ÊñáÊú¨](https://example.com)" },
  { key: "image", icon: Image, tip: "ÂõæÁâá", template: "![ÂõæÁâáÊèèËø∞](https://example.com/image.jpg)" },
  { key: "table", icon: Table, tip: "Ë°®Ê†º", action: "table-dialog" },
];

const SLASH_COMMANDS = [
  { key: "h1", label: "# ‰∏ÄÁ∫ßÊ†áÈ¢ò", snippet: "# Ê†áÈ¢ò\n\n" },
  { key: "h2", label: "## ‰∫åÁ∫ßÊ†áÈ¢ò", snippet: "## Â∞èËäÇÊ†áÈ¢ò\n\n" },
  { key: "h3", label: "### ‰∏âÁ∫ßÊ†áÈ¢ò", snippet: "### Â≠êÊ†áÈ¢ò\n\n" },
  { key: "todo", label: "‚úÖ ‰ªªÂä°ÂàóË°®", snippet: "- [ ] ÂæÖÂäû‰∫ãÈ°π 1\n- [x] Â∑≤ÂÆåÊàê‰∫ãÈ°π\n- [ ] ÂæÖÂäû‰∫ãÈ°π 2\n\n" },
  { key: "note", label: "üí° ÊèêÁ§∫Âùó", snippet: "> **üí° ÊèêÁ§∫**\n> \n> ËøôÈáåÊòØÈáçË¶ÅÊèêÁ§∫ÂÜÖÂÆπ\n\n" },
  { key: "warn", label: "‚ö†Ô∏è Ë≠¶ÂëäÂùó", snippet: "> **‚ö†Ô∏è Ë≠¶Âëä**\n> \n> ËØ∑Ê≥®ÊÑèËøôÈáåÁöÑÂÜÖÂÆπÔºÅ\n\n" },
  { key: "code", label: "üíª ‰ª£Á†ÅÂùó", snippet: "```javascript\n// Âú®ËøôÈáåËæìÂÖ•‰ª£Á†Å\nconsole.log('Hello World!');\n```\n\n" },
  { key: "table", label: "üìä Êï∞ÊçÆË°®Ê†º", snippet: "| È°πÁõÆ | Áä∂ÊÄÅ | Â§áÊ≥® |\n|------|------|------|\n| È°πÁõÆA | ËøõË°å‰∏≠ | ‰ºòÂÖàÁ∫ßÈ´ò |\n| È°πÁõÆB | Â∑≤ÂÆåÊàê | Ë¥®ÈáèËâØÂ•Ω |\n\n" },
  { key: "hr", label: "‚ûñ ÂàÜÂâ≤Á∫ø", snippet: "\n---\n\n" },
];

const AI_STYLES = [
  { key: "academic", label: "üìö Â≠¶ÊúØÈ£é", description: "‰∏•Ë∞®„ÄÅ‰∏ì‰∏ö„ÄÅÈÄªËæëÊ∏ÖÊô∞" },
  { key: "creative", label: "üé® ÂàõÊÑèÈ£é", description: "ÁîüÂä®„ÄÅÊúâË∂£„ÄÅÂØåÊúâÊÉ≥Ë±°Âäõ" },
  { key: "concise", label: "‚úÇÔ∏è ÁÆÄÊ¥ÅÈ£é", description: "Ë®ÄÁÆÄÊÑèËµÖ„ÄÅÊù°ÁêÜÊ∏ÖÊô∞" },
  { key: "business", label: "üíº ÂïÜÂä°È£é", description: "Ê≠£Âºè„ÄÅ‰∏ì‰∏ö„ÄÅÁõÆÊ†áÂØºÂêë" },
  { key: "friendly", label: "üòä ÂèãÂ•ΩÈ£é", description: "‰∫≤Âíå„ÄÅÊòìÊáÇ„ÄÅË¥¥ËøëÁîüÊ¥ª" },
  { key: "technical", label: "‚öôÔ∏è ÊäÄÊúØÈ£é", description: "ÂáÜÁ°Æ„ÄÅËØ¶ÁªÜ„ÄÅÈÄªËæë‰∏•ÂØÜ" },
];

const AI_FUNCTIONS = [
  { 
    key: "summarize", 
    label: "üìã Êô∫ËÉΩÊëòË¶Å", 
    description: "ÁîüÊàêÊñáÊ°£ÊëòË¶ÅÊàñÊèêÂèñÂÖ≥ÈîÆÁÇπ",
    icon: "üìã",
    needsSelection: false
  },
  { 
    key: "suggestions", 
    label: "‚ú® Êô∫ËÉΩÂª∫ËÆÆ", 
    description: "ÊãºÂÜô„ÄÅËØ≠Ê≥ï„ÄÅËØ≠Ê∞î„ÄÅÊéíÁâà‰ºòÂåñ",
    icon: "‚ú®",
    needsSelection: true
  },
  { 
    key: "image-generate", 
    label: "üñºÔ∏è ÂõæÊñáÁîüÊàê", 
    description: "‰∏∫ÈÄâ‰∏≠ÊÆµËêΩÁîüÊàêÈÖçÂõæ",
    icon: "üñºÔ∏è",
    needsSelection: true
  },
  { 
    key: "translate", 
    label: "üåê Êô∫ËÉΩÁøªËØë", 
    description: "ÁøªËØëÈÄâ‰∏≠ÊñáÊú¨",
    icon: "üåê",
    needsSelection: true
  }
];

// ‰∏ªÈ¢òÈÖçÁΩÆ
const THEMES = {
  light: {
    bg: '#ffffff',
    fg: '#111827',
    muted: '#6b7280',
    border: '#e5e7eb',
    cardBg: '#ffffff',
    primary: '#6366f1',
    accent: '#f3f4f6',
    shadow: 'rgba(0, 0, 0, 0.1)',
  },
  dark: {
    bg: '#0f172a',
    fg: '#f1f5f9',
    muted: '#94a3b8',
    border: '#334155',
    cardBg: '#1e293b',
    primary: '#6366f1',
    accent: '#334155',
    shadow: 'rgba(0, 0, 0, 0.3)',
  },
  sepia: {
    bg: '#f7f3e9',
    fg: '#5d4e37',
    muted: '#8b7355',
    border: '#d4c4a0',
    cardBg: '#faf8f3',
    primary: '#8b5a3c',
    accent: '#f0eadb',
    shadow: 'rgba(139, 90, 60, 0.1)',
  }
};

function downloadFile(filename: string, content: string, type = "text/plain;charset=utf-8"){
  const blob = new Blob([content], { type });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
  a.click();
  URL.revokeObjectURL(url);
}

function generateId() {
  return Math.random().toString(36).substr(2, 9);
}

function extractTOC(markdown: string): TOCItem[] {
  const lines = markdown.split('\n');
  const toc: TOCItem[] = [];

  lines.forEach((line) => {
    const match = line.match(/^(#{1,6})\s+(.+)/);
    if (match) {
      const level = match[1].length;
      const text = match[2].trim();
      const id = text.toLowerCase().replace(/[^\w\u4e00-\u9fa5]+/g, '-');
      toc.push({ level, text, id });
    }
  });

  return toc;
}

function calculateReadingTime(text: string): number {
  const wordsPerMinute = 200; // ‰∏≠ÊñáÁ∫¶200Â≠ó/ÂàÜÈíü
  const wordCount = text.length;
  return Math.ceil(wordCount / wordsPerMinute);
}

function caretPosition(textarea: HTMLTextAreaElement){
  const { selectionEnd } = textarea;
  const div = document.createElement('div');
  const style = getComputedStyle(textarea);

  for (const prop of Array.from(style)) {
    (div.style as any)[prop] = (style as any)[prop];
  }

  div.style.position = 'absolute';
  div.style.visibility = 'hidden';
  div.style.whiteSpace = 'pre-wrap';
  div.style.wordWrap = 'break-word';
  div.style.overflow = 'hidden';
  div.textContent = textarea.value.substring(0, selectionEnd ?? 0);

  if ((selectionEnd ?? 0) === textarea.value.length) {
    div.textContent += '.';
  }

  document.body.appendChild(div);
  const span = document.createElement('span');
  span.textContent = textarea.value.substring(selectionEnd ?? 0) || '.';
  div.appendChild(span);
  const rect = span.getBoundingClientRect();
  document.body.removeChild(div);
  return rect;
}

export default function App(){
  // Â§öÊñáÊ°£ÁÆ°ÁêÜ
  const [documents, setDocuments] = useState<Document[]>(() => {
    try {
      const saved = localStorage.getItem("inkpersona:documents");
      if (saved) {
        const docs = JSON.parse(saved);
        return docs.map((doc: any) => ({
          ...doc,
          created: new Date(doc.created),
          modified: new Date(doc.modified)
        }));
      }
      return [{
        id: generateId(),
        title: "Êú™ÂëΩÂêçÊñáÊ°£",
        content: sample,
        created: new Date(),
        modified: new Date()
      }];
    } catch {
      return [{
        id: generateId(),
        title: "Êú™ÂëΩÂêçÊñáÊ°£",
        content: sample,
        created: new Date(),
        modified: new Date()
      }];
    }
  });

  const [activeDocId, setActiveDocId] = useState(() => documents[0]?.id || '');
  const activeDoc = documents.find(doc => doc.id === activeDocId) || documents[0];

  const [showPreview, setShowPreview] = useState(() => {
    try {
      return JSON.parse(localStorage.getItem("inkpersona:preview") || "true");
    } catch {
      return true;
    }
  });

  const [zen, setZen] = useState(false);
  const [theme, setTheme] = useState(() => {
    try {
      return localStorage.getItem("inkpersona:theme") || "light";
    } catch {
      return "light";
    }
  });

  const [fontSize, setFontSize] = useState(() => {
    try {
      return Number(localStorage.getItem("inkpersona:fontSize")) || 16;
    } catch {
      return 16;
    }
  });

  const [lineWidth, setLineWidth] = useState(() => {
    try {
      return Number(localStorage.getItem("inkpersona:lineWidth")) || 820;
    } catch {
      return 820;
    }
  });

  const [showTOC, setShowTOC] = useState(true);
  const [showDocumentList, setShowDocumentList] = useState(false);
  const [slashOpen, setSlashOpen] = useState(false);
  const [slashPos, setSlashPos] = useState({x:0,y:0});
  const [slashFilter, setSlashFilter] = useState("");
  const [status, setStatus] = useState("Â∑≤‰øùÂ≠ò");
  const [showSettings, setShowSettings] = useState(false);
  const [wordCount, setWordCount] = useState({ chars: 0, words: 0, lines: 0 });
  const [showAIPanel, setShowAIPanel] = useState(false);
  const [selectedText, setSelectedText] = useState("");
  const [aiLoading, setAiLoading] = useState(false);
  const [showTableDialog, setShowTableDialog] = useState(false);
  const [tableRows, setTableRows] = useState(3);
  const [tableCols, setTableCols] = useState(3);
  const [dragOver, setDragOver] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [aiFunction, setAiFunction] = useState<string>('rewrite');
  const [aiResult, setAiResult] = useState<string>('');
  const [openAIConfig, setOpenAIConfig] = useState(() => {
    try {
      return JSON.parse(localStorage.getItem("inkpersona:openai") || '{}');
    } catch {
      return {};
    }
  });
  const [docSearch, setDocSearch] = useState('');
  const [docSort, setDocSort] = useState<'modified' | 'created' | 'title'>('modified');
  const [notification, setNotification] = useState<{type: 'success' | 'error' | 'info', message: string} | null>(null);
  const [showHelpPanel, setShowHelpPanel] = useState(false);
  
  // Â≠òÂÇ®ÂõæÁâáÊï∞ÊçÆÁöÑÊò†Â∞ÑÔºåÁî®‰∫éÂ§ÑÁêÜË∂ÖÈïøbase64
  const [imageDataMap, setImageDataMap] = useState<Map<string, string>>(new Map());

  // ÁîüÊàêÂõæÁâáIDÂíåÂ≠òÂÇ®ÂõæÁâáÊï∞ÊçÆ
  function storeImageData(imageData: string, filename: string): string {
    const imageId = `img_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    setImageDataMap(prev => {
      const newMap = new Map(prev);
      newMap.set(imageId, imageData);
      return newMap;
    });
    return imageId;
  }

  const textRef = useRef<HTMLTextAreaElement|null>(null);
  const slashRef = useRef<HTMLDivElement|null>(null);

  // ÈÄöÁü•Á≥ªÁªü
  function showNotification(type: 'success' | 'error' | 'info', message: string) {
    setNotification({ type, message });
    setTimeout(() => setNotification(null), 3000);
  }

  // Ëá™Âä®ÈöêËóèÈÄöÁü•
  useEffect(() => {
    if (notification) {
      const timer = setTimeout(() => setNotification(null), 3000);
      return () => clearTimeout(timer);
    }
  }, [notification]);

  // ÁîüÊàêË°®Ê†ºÂÜÖÂÆπ
  function generateTable(rows: number, cols: number): string {
    const headers = Array(cols).fill(null).map((_, i) => `Âàó${i + 1}`).join(' | ');
    const separator = Array(cols).fill('---').join(' | ');
    const tableRows = Array(rows - 1).fill(null).map((_, i) => {
      return Array(cols).fill(null).map((_, j) => `ÂÄº${i + 1}-${j + 1}`).join(' | ');
    });
    return `| ${headers} |\n|${separator}|\n` + tableRows.map(row => `| ${row} |`).join('\n') + '\n\n';
  }

  // ÊèíÂÖ•Ë°®Ê†º
  function insertTable() {
    const ta = textRef.current;
    if (!ta || !activeDoc) return;

    const start = ta.selectionStart || 0;
    const tableContent = generateTable(tableRows, tableCols);
    const next = activeDoc.content.slice(0, start) + tableContent + activeDoc.content.slice(start);
    updateActiveDocument(next);
    setShowTableDialog(false);

    setTimeout(() => {
      ta.focus();
      const caret = start + tableContent.length;
      ta.setSelectionRange(caret, caret);
    }, 0);
  }

  // Â§ÑÁêÜÊãñÊãΩ‰∫ã‰ª∂
  function handleDragOver(e: React.DragEvent) {
    e.preventDefault();
    e.stopPropagation();
    setDragOver(true);
  }

  function handleDragLeave(e: React.DragEvent) {
    e.preventDefault();
    e.stopPropagation();
    setDragOver(false);
  }

  function handleDrop(e: React.DragEvent) {
    e.preventDefault();
    e.stopPropagation();
    setDragOver(false);

    const files = Array.from(e.dataTransfer.files);
    const imageFiles = files.filter(file => {
      const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
      return validTypes.includes(file.type.toLowerCase());
    });
    
    if (imageFiles.length === 0) {
      showNotification('error', 'ËØ∑ÊãñÊãΩÊúâÊïàÁöÑÂõæÁâáÊñá‰ª∂ (JPG, PNG, GIF, WebP)');
      return;
    }
    
    if (imageFiles.length !== files.length) {
      showNotification('info', `Â∑≤ËøáÊª§Êéâ ${files.length - imageFiles.length} ‰∏™ÈùûÂõæÁâáÊñá‰ª∂`);
    }
    
    uploadImages(imageFiles);
  }

  // ‰∏ä‰º†ÂõæÁâá
  async function uploadImages(files: File[]) {
    const ta = textRef.current;
    if (!ta || !activeDoc) return;

    const start = ta.selectionStart || 0;
    let insertText = '';
    let successCount = 0;
    let failCount = 0;

    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      setUploadProgress((i / files.length) * 100);
      
      try {
        // Â∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫Base64Ê†ºÂºèÔºåËøôÊ†∑ÂèØ‰ª•Âú®È¢ÑËßà‰∏≠Ê≠£Â∏∏ÊòæÁ§∫
        const imageDataUrl = await convertFileToBase64(file);
        
        // È™åËØÅÁîüÊàêÁöÑbase64Ê†ºÂºè
        if (imageDataUrl && imageDataUrl.startsWith('data:image/')) {
          // È™åËØÅbase64Êï∞ÊçÆÁöÑÂÆåÊï¥ÊÄß
          const [header, data] = imageDataUrl.split(',');
          if (header && data && data.length > 0) {
            // Ê£ÄÊü•base64ÈïøÂ∫¶ÔºåÂ¶ÇÊûúÂ§™Èïø‰ΩøÁî®IDÂºïÁî®ÊñπÂºè
            if (imageDataUrl.length > 50000) { // 50KBÈòàÂÄº
              console.log('üîÑ ÂõæÁâáËøáÂ§ßÔºå‰ΩøÁî®IDÂºïÁî®ÊñπÂºè');
              const imageId = storeImageData(imageDataUrl, file.name);
              const markdownImage = `![${file.name.split('.')[0]}](${imageId})\n\n`;
              insertText += markdownImage;
            } else {
              // Áõ¥Êé•ÂµåÂÖ•base64
              const markdownImage = `![${file.name.split('.')[0]}](${imageDataUrl})\n\n`;
              insertText += markdownImage;
            }
            
            successCount++;
            
            console.log('‚úÖ ÂõæÁâáËΩ¨Êç¢ÊàêÂäü:', {
              filename: file.name,
              size: file.size,
              type: file.type,
              base64Length: imageDataUrl.length,
              base64Header: header,
              base64DataLength: data.length,
              base64Prefix: imageDataUrl.substring(0, 50) + '...',
              useIdReference: imageDataUrl.length > 50000
            });
            
            // ÁÆÄÂçïÊµãËØïbase64ÊòØÂê¶ÂèØ‰ª•Ë¢´ÊµèËßàÂô®Ëß£Á†Å
            try {
              const testImg = new Image();
              testImg.onload = () => {
                console.log('‚úÖ Base64ÂõæÁâáÂèØ‰ª•Ê≠£Â∏∏Ëß£Á†Å:', {
                  width: testImg.width,
                  height: testImg.height
                });
              };
              testImg.onerror = () => {
                console.warn('‚ö†Ô∏è Base64ÂõæÁâáËß£Á†ÅÊµãËØïÂ§±Ë¥•');
              };
              testImg.src = imageDataUrl;
            } catch (e) {
              console.warn('‚ö†Ô∏è Base64ÂõæÁâáÊµãËØïÂºÇÂ∏∏:', e);
            }
          } else {
            throw new Error('ÁîüÊàêÁöÑbase64Ê†ºÂºèÊó†ÊïàÔºöÁº∫Â∞ëÊï∞ÊçÆÈÉ®ÂàÜ');
          }
        } else {
          throw new Error('ÁîüÊàêÁöÑbase64Ê†ºÂºèÊó†ÊïàÔºö‰∏çÊòØÊúâÊïàÁöÑÊï∞ÊçÆURL');
        }
        
        showNotification('info', `Ê≠£Âú®Â§ÑÁêÜÂõæÁâá ${i + 1}/${files.length}...`);
      } catch (error) {
        console.error('ÂõæÁâá‰∏ä‰º†Â§±Ë¥•:', error);
        const errorMessage = error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ';
        showNotification('error', `ÂõæÁâá ${file.name} Â§ÑÁêÜÂ§±Ë¥•: ${errorMessage}`);
        failCount++;
        
        // ‰ªçÁÑ∂ÊèíÂÖ•‰∏Ä‰∏™Âç†‰ΩçÁ¨¶
        const fallbackMarkdown = `![${file.name}](ÂõæÁâáÂ§ÑÁêÜÂ§±Ë¥•: ${errorMessage})\n\n`;
        insertText += fallbackMarkdown;
      }
    }

    // ÊèíÂÖ•MarkdownÂõæÁâáÈìæÊé•
    const next = activeDoc.content.slice(0, start) + insertText + activeDoc.content.slice(start);
    updateActiveDocument(next);
    
    setTimeout(() => {
      ta.focus();
      const caret = start + insertText.length;
      ta.setSelectionRange(caret, caret);
      setUploadProgress(0);
      
      // ÊòæÁ§∫ÊúÄÁªàÁªìÊûúÈÄöÁü•
      if (failCount === 0) {
        showNotification('success', `ÊàêÂäü‰∏ä‰º† ${successCount} ‰∏™ÂõæÁâá`);
      } else if (successCount === 0) {
        showNotification('error', `ÊâÄÊúâÂõæÁâá‰∏ä‰º†Â§±Ë¥•`);
      } else {
        showNotification('info', `ÊàêÂäü‰∏ä‰º† ${successCount} ‰∏™ÂõæÁâáÔºå${failCount} ‰∏™Â§±Ë¥•`);
      }
    }, 300);
  }

  // Â∞ÜÊñá‰ª∂ËΩ¨Êç¢‰∏∫Base64Ê†ºÂºèÔºåÂπ∂ËøõË°åÂéãÁº©
  function convertFileToBase64(file: File): Promise<string> {
    return new Promise((resolve, reject) => {
      // Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞è (ÈôêÂà∂‰∏∫5MB)
      const maxSize = 5 * 1024 * 1024; // 5MB
      if (file.size > maxSize) {
        reject(new Error(`ÂõæÁâáÊñá‰ª∂ËøáÂ§ß (${Math.round(file.size / 1024 / 1024)}MB)ÔºåËØ∑ÈÄâÊã©Â∞è‰∫é5MBÁöÑÂõæÁâá`));
        return;
      }

      // È™åËØÅÊñá‰ª∂Á±ªÂûã
      const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
      if (!validTypes.includes(file.type.toLowerCase())) {
        reject(new Error(`‰∏çÊîØÊåÅÁöÑÂõæÁâáÊ†ºÂºè: ${file.type}`));
        return;
      }

      console.log('üîÑ ÂºÄÂßãËΩ¨Êç¢ÂõæÁâá:', {
        name: file.name,
        size: file.size,
        type: file.type
      });

      // Â¶ÇÊûúÊòØÂõæÁâáÊñá‰ª∂ÔºåÂ∞ùËØïËøõË°åÂéãÁº©Â§ÑÁêÜ
      if (file.type.startsWith('image/')) {
        // ÂÖàÂ∞ùËØï‰ΩøÁî®ÂéãÁº©ÂäüËÉΩ
        compressImage(file, 0.8, 1200)
          .then((result) => {
            console.log('‚úÖ ÂõæÁâáÂéãÁº©ÊàêÂäü:', result.substring(0, 50) + '...');
            resolve(result);
          })
          .catch((error) => {
            console.warn('ÂõæÁâáÂéãÁº©Â§±Ë¥•ÔºåÂ∞ùËØïÁõ¥Êé•ËΩ¨Êç¢:', error);
            // Â¶ÇÊûúÂéãÁº©Â§±Ë¥•ÔºåÂõûÈÄÄÂà∞Áõ¥Êé•ËΩ¨Êç¢
            directFileToBase64(file).then((result) => {
              console.log('‚úÖ Áõ¥Êé•ËΩ¨Êç¢ÊàêÂäü:', result.substring(0, 50) + '...');
              resolve(result);
            }).catch(reject);
          });
      } else {
        // ÈùûÂõæÁâáÊñá‰ª∂Áõ¥Êé•ËΩ¨Êç¢
        directFileToBase64(file).then(resolve).catch(reject);
      }
    });
  }

  // Áõ¥Êé•Â∞ÜÊñá‰ª∂ËΩ¨Êç¢‰∏∫Base64Ôºà‰∏çÂéãÁº©Ôºâ
  function directFileToBase64(file: File): Promise<string> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        if (reader.result) {
          resolve(reader.result as string);
        } else {
          reject(new Error('Êñá‰ª∂ËØªÂèñÂ§±Ë¥•'));
        }
      };
      reader.onerror = () => reject(new Error('Êñá‰ª∂ËØªÂèñÈîôËØØ'));
      reader.readAsDataURL(file);
    });
  }

  // ÂõæÁâáÂéãÁº©ÂäüËÉΩ
  function compressImage(file: File, quality: number, maxWidth: number): Promise<string> {
    return new Promise((resolve, reject) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      // ÂàõÂª∫ImageÂØπË±°ÔºåÂÖºÂÆπ‰∏çÂêåÁéØÂ¢É
      let img: HTMLImageElement;
      try {
        img = new Image();
      } catch (error) {
        // Â¶ÇÊûúImageÊûÑÈÄ†ÂáΩÊï∞‰∏çÂèØÁî®ÔºåÂàõÂª∫imgÂÖÉÁ¥†
        img = document.createElement('img');
      }
      
      const objectUrl = URL.createObjectURL(file);

      img.onload = () => {
        // Ê∏ÖÁêÜ‰∏¥Êó∂URL
        URL.revokeObjectURL(objectUrl);
        
        try {
          // ËÆ°ÁÆóÂéãÁº©ÂêéÁöÑÂ∞∫ÂØ∏
          let { width, height } = img;
          if (width > maxWidth) {
            height = (height * maxWidth) / width;
            width = maxWidth;
          }

          canvas.width = width;
          canvas.height = height;

          // ÁªòÂà∂Âπ∂ÂéãÁº©ÂõæÁâá
          ctx?.drawImage(img, 0, 0, width, height);
          
          // ËΩ¨Êç¢‰∏∫Base64
          const dataUrl = canvas.toDataURL(file.type === 'image/png' ? 'image/png' : 'image/jpeg', quality);
          resolve(dataUrl);
        } catch (error) {
          reject(new Error(`ÂõæÁâáÂ§ÑÁêÜÂ§±Ë¥•: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}`));
        }
      };

      img.onerror = () => {
        URL.revokeObjectURL(objectUrl);
        reject(new Error('ÂõæÁâáÂä†ËΩΩÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÂõæÁâáÊ†ºÂºèÊòØÂê¶Ê≠£Á°Æ'));
      };
      
      // ËÆæÁΩÆÂõæÁâáÊ∫ê
      try {
        img.src = objectUrl;
      } catch (error) {
        URL.revokeObjectURL(objectUrl);
        reject(new Error('Êó†Ê≥ïÂä†ËΩΩÂõæÁâáÊñá‰ª∂'));
      }
    });
  }

  // ËÆ°ÁÆóÊñáÊ°£ÁªüËÆ°
  const updateWordCount = useCallback((text: string) => {
    const chars = text.length;
    const words = text.trim() ? text.trim().split(/\s+/).length : 0;
    const lines = text.split('\n').length;
    setWordCount({ chars, words, lines });
  }, []);

  // ‰øùÂ≠òÂà∞Êú¨Âú∞Â≠òÂÇ®
  useEffect(() => {
    try {
      localStorage.setItem("inkpersona:documents", JSON.stringify(documents));
      localStorage.setItem("inkpersona:preview", JSON.stringify(showPreview));
      localStorage.setItem("inkpersona:theme", theme);
      localStorage.setItem("inkpersona:fontSize", String(fontSize));
      localStorage.setItem("inkpersona:lineWidth", String(lineWidth));
      localStorage.setItem("inkpersona:openai", JSON.stringify(openAIConfig));
      updateWordCount(activeDoc?.content || '');
      setStatus("Â∑≤‰øùÂ≠ò");
    } catch (e) {
      console.warn("Êó†Ê≥ï‰øùÂ≠òÂà∞Êú¨Âú∞Â≠òÂÇ®", e);
    }
  }, [documents, showPreview, theme, fontSize, lineWidth, openAIConfig, updateWordCount, activeDoc]);

  // Â∫îÁî®‰∏ªÈ¢ò
  useEffect(() => {
    const currentTheme = THEMES[theme as keyof typeof THEMES] || THEMES.light;
    const root = document.documentElement;

    Object.entries(currentTheme).forEach(([key, value]) => {
      root.style.setProperty(`--${key}`, value);
    });
  }, [theme]);

  const toc = useMemo(() => {
    return extractTOC(activeDoc?.content || '');
  }, [activeDoc?.content]);

  // ËøáÊª§ÂíåÊéíÂ∫èÊñáÊ°£
  const filteredAndSortedDocs = useMemo(() => {
    let filtered = documents;
    
    // ÊêúÁ¥¢ËøáÊª§
    if (docSearch.trim()) {
      const searchLower = docSearch.toLowerCase();
      filtered = documents.filter(doc => 
        doc.title.toLowerCase().includes(searchLower) ||
        doc.content.toLowerCase().includes(searchLower)
      );
    }
    
    // ÊéíÂ∫è
    const sorted = [...filtered].sort((a, b) => {
      switch (docSort) {
        case 'title':
          return a.title.localeCompare(b.title);
        case 'created':
          return new Date(b.created).getTime() - new Date(a.created).getTime();
        case 'modified':
        default:
          return new Date(b.modified).getTime() - new Date(a.modified).getTime();
      }
    });
    
    return sorted;
  }, [documents, docSearch, docSort]);

  // ÈîÆÁõòÂø´Êç∑ÈîÆ
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => {
      const isCtrl = e.ctrlKey || e.metaKey;

      if (isCtrl && e.key.toLowerCase() === 's') {
        e.preventDefault();
        downloadMD();
      }

      if (isCtrl && e.key.toLowerCase() === 'b') {
        e.preventDefault();
        applyToolbar(TOOLBAR.find(t => t.key === 'bold')!);
      }

      if (isCtrl && e.key.toLowerCase() === 'i') {
        e.preventDefault();
        applyToolbar(TOOLBAR.find(t => t.key === 'italic')!);
      }

      if (isCtrl && e.key.toLowerCase() === 'k') {
        e.preventDefault();
        applyToolbar(TOOLBAR.find(t => t.key === 'link')!);
      }

      if (isCtrl && e.key === 'e') {
        e.preventDefault();
        handleTextSelection();
      }

      // AIÊîπÂÜôÂø´Êç∑ÈîÆ
      if (isCtrl && e.shiftKey && e.key === 'A') {
        e.preventDefault();
        quickAIRewrite('academic');
      }

      if (isCtrl && e.shiftKey && e.key === 'C') {
        e.preventDefault();
        quickAIRewrite('creative');
      }

      if (isCtrl && e.shiftKey && e.key === 'S') {
        e.preventDefault();
        quickAIRewrite('concise');
      }

      if (isCtrl && e.shiftKey && e.key === 'B') {
        e.preventDefault();
        quickAIRewrite('business');
      }

      if (isCtrl && e.shiftKey && e.key === 'F') {
        e.preventDefault();
        quickAIRewrite('friendly');
      }

      if (isCtrl && e.shiftKey && e.key === 'T') {
        e.preventDefault();
        quickAIRewrite('technical');
      }

      if (e.key === '/' && !slashOpen) {
        const ta = textRef.current;
        if (!ta || ta !== document.activeElement) return;

        setTimeout(() => {
          setSlashOpen(true);
          const rect = caretPosition(ta);
          setSlashPos({ x: rect.left, y: rect.top + 20 });
          setSlashFilter("");
        }, 0);
      }

      if (e.key === 'Escape') {
        if (zen) {
          setZen(false);
        } else {
          setSlashOpen(false);
          setShowSettings(false);
          setShowAIPanel(false);
          setShowTableDialog(false);
          setShowDocumentList(false);
          setShowHelpPanel(false);
        }
      }

      // ÊñáÊ°£ÂØºËà™Âø´Êç∑ÈîÆ
      if (isCtrl && e.key === 'n') {
        e.preventDefault();
        createNewDocument();
      }

      if (isCtrl && e.key === 'd') {
        e.preventDefault();
        setShowDocumentList(!showDocumentList);
      }

      if (isCtrl && e.key === ',') {
        e.preventDefault();
        setShowSettings(!showSettings);
      }

      // Â∏ÆÂä©Èù¢ÊùøÂø´Êç∑ÈîÆ
      if (e.key === 'F1' || (e.shiftKey && e.key === '?')) {
        e.preventDefault();
        setShowHelpPanel(!showHelpPanel);
      }
    };

    window.addEventListener('keydown', onKey);
    return () => window.removeEventListener('keydown', onKey);
  }, [slashOpen]);

  // ÁÇπÂáªÂ§ñÈÉ®ÂÖ≥Èó≠ËèúÂçï
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      const target = e.target as Element;
      
      // Ê£ÄÊü•slashËèúÂçï
      if (slashRef.current && !slashRef.current.contains(target)) {
        setSlashOpen(false);
      }

      // Ê£ÄÊü•ËÆæÁΩÆÈù¢Êùø
      if (showSettings) {
        const settingsPanel = document.querySelector('.settings-panel');
        const settingsButton = document.querySelector('.button[data-settings]');
        if (settingsPanel && !settingsPanel.contains(target) && 
            settingsButton && !settingsButton.contains(target)) {
          setShowSettings(false);
        }
      }

      // Ê£ÄÊü•AIÈù¢Êùø
      if (showAIPanel) {
        const aiPanel = document.querySelector('.ai-panel');
        const aiButton = document.querySelector('.ai-button');
        if (aiPanel && !aiPanel.contains(target) && 
            aiButton && !aiButton.contains(target)) {
          setShowAIPanel(false);
        }
      }

      // Ê£ÄÊü•ÊñáÊ°£ÂàóË°®Èù¢Êùø
      if (showDocumentList) {
        const docPanel = document.querySelector('.document-list-panel');
        const docButton = document.querySelector('.button[data-docs]');
        if (docPanel && !docPanel.contains(target) && 
            docButton && !docButton.contains(target)) {
          setShowDocumentList(false);
        }
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [slashOpen, showSettings, showAIPanel, showDocumentList]);

  const markdown = useMemo(() => {
    const content = activeDoc?.content || '';
    
    // Ë∞ÉËØïÔºöÊ£ÄÊü•ÂÜÖÂÆπ‰∏≠ÁöÑÂõæÁâáÈìæÊé•
    const imageMatches = content.match(/!\[([^\]]*)\]\(([^)]+)\)/g);
    if (imageMatches) {
      console.log('üìù ÂèëÁé∞MarkdownÂõæÁâá:', imageMatches.map(match => {
        const [, alt, src] = match.match(/!\[([^\]]*)\]\(([^)]+)\)/) || [];
        return {
          match: match.substring(0, 100) + (match.length > 100 ? '...' : ''),
          alt,
          srcLength: src?.length,
          isBase64: src?.startsWith('data:image/'),
          srcPreview: src?.substring(0, 50) + '...'
        };
      }));
    }
    
    return content;
  }, [activeDoc?.content]);

  const filteredSlashCommands = useMemo(() => {
    if (!slashFilter) return SLASH_COMMANDS;
    return SLASH_COMMANDS.filter(cmd =>
      cmd.label.toLowerCase().includes(slashFilter.toLowerCase())
    );
  }, [slashFilter]);

  function updateDocument(id: string, updates: Partial<Document>) {
    setDocuments(docs => docs.map(doc =>
      doc.id === id ? { ...doc, ...updates, modified: new Date() } : doc
    ));
    setStatus("Êú™‰øùÂ≠òÊõ¥Êîπ");
  }

  function updateActiveDocument(content: string) {
    if (activeDoc) {
      updateDocument(activeDoc.id, { content });
    }
  }

  function createNewDocument() {
    const newDoc: Document = {
      id: generateId(),
      title: "Êñ∞ÊñáÊ°£",
      content: "# Êñ∞ÊñáÊ°£\n\nÂºÄÂßã‰Ω†ÁöÑÂÜô‰Ωú...\n",
      created: new Date(),
      modified: new Date()
    };
    setDocuments(docs => [...docs, newDoc]);
    setActiveDocId(newDoc.id);
    showNotification('success', 'Êñ∞ÊñáÊ°£Â∑≤ÂàõÂª∫');
  }

  function deleteDocument(id: string) {
    if (documents.length <= 1) return;

    const docToDelete = documents.find(doc => doc.id === id);
    setDocuments(docs => docs.filter(doc => doc.id !== id));
    if (activeDocId === id) {
      const remaining = documents.filter(doc => doc.id !== id);
      setActiveDocId(remaining[0]?.id || '');
    }
    showNotification('success', `ÊñáÊ°£"${docToDelete?.title || 'Êú™ÂëΩÂêç'}"Â∑≤Âà†Èô§`);
  }

  function duplicateDocument(id: string) {
    const docToDupe = documents.find(doc => doc.id === id);
    if (!docToDupe) return;

    const newDoc: Document = {
      ...docToDupe,
      id: generateId(),
      title: docToDupe.title + " (ÂâØÊú¨)",
      created: new Date(),
      modified: new Date()
    };
    setDocuments(docs => [...docs, newDoc]);
    showNotification('success', `ÊñáÊ°£"${docToDupe.title}"Â∑≤Â§çÂà∂`);
  }

  function applyToolbar(tool: Tool) {
    const ta = textRef.current;
    if (!ta || !activeDoc) return;

    // ÁâπÊÆäÂ§ÑÁêÜË°®Ê†ºÂØπËØùÊ°Ü
    if (tool.action === 'table-dialog') {
      setShowTableDialog(true);
      return;
    }

    const start = ta.selectionStart || 0;
    const end = ta.selectionEnd || 0;
    const selected = activeDoc.content.slice(start, end) || tool.insert || "";
    let replaced = selected;

    if (tool.wrap) {
      replaced = `${tool.wrap[0]}${selected}${tool.wrap[1]}`;
    } else if (tool.prefix) {
      replaced = selected.split('\n').map(l => tool.prefix + l).join('\n');
    } else if (tool.template) {
      replaced = tool.template;
    }

    const next = activeDoc.content.slice(0, start) + replaced + activeDoc.content.slice(end);
    updateActiveDocument(next);

    setTimeout(() => {
      ta.focus();
      const caret = start + replaced.length;
      ta.setSelectionRange(caret, caret);
    }, 0);
  }

  function insertSnippet(snippet: string) {
    const ta = textRef.current;
    if (!ta || !activeDoc) return;

    const start = ta.selectionStart || 0;
    const end = ta.selectionEnd || 0;

    // ÁßªÈô§ÂºÄÂ§¥ÁöÑ "/"
    const textBefore = activeDoc.content.slice(0, start);
    const lastSlashIndex = textBefore.lastIndexOf('/');
    const actualStart = lastSlashIndex >= 0 ? lastSlashIndex : start;

    const next = activeDoc.content.slice(0, actualStart) + snippet + activeDoc.content.slice(end);
    updateActiveDocument(next);
    setSlashOpen(false);

    setTimeout(() => {
      ta.focus();
      const caret = actualStart + snippet.length;
      ta.setSelectionRange(caret, caret);
    }, 0);
  }

  function handleTextSelection() {
    const ta = textRef.current;
    if (!ta) return;

    const start = ta.selectionStart || 0;
    const end = ta.selectionEnd || 0;
    const selected = ta.value.slice(start, end);

    if (selected.trim()) {
      setSelectedText(selected);
      setAiFunction('rewrite');
    } else {
      setSelectedText('');
      setAiFunction('summarize');
    }
    setShowAIPanel(true);
  }

  // Â§ÑÁêÜAIÂäüËÉΩ
  async function handleAIFunction(functionKey: string, style?: string) {
    setAiLoading(true);
    setAiResult('');
    
    try {
      let requestData: any = {};
      let endpoint = '';

      switch (functionKey) {
        case 'summarize':
          endpoint = '/api/summarize';
          requestData = {
            text: activeDoc?.content || '',
            instruction: 'ËØ∑‰∏∫ËøôÁØáÊñáÊ°£ÁîüÊàê‰∏Ä‰∏™ÁÆÄÊ¥ÅÁöÑÊëòË¶ÅÔºåÊèêÂèñÂÖ≥ÈîÆÁÇπ'
          };
          break;
          
        case 'suggestions':
          endpoint = '/api/suggest';
          requestData = {
            text: selectedText,
            instruction: 'ËØ∑ÂàÜÊûêËøôÊÆµÊñáÂ≠óÁöÑÊãºÂÜô„ÄÅËØ≠Ê≥ï„ÄÅËØ≠Ê∞îÂíåÊéíÁâàÔºåÊèê‰æõ‰ºòÂåñÂª∫ËÆÆ'
          };
          break;
          
        case 'image-generate':
          endpoint = '/api/generate-image-prompt';
          requestData = {
            text: selectedText,
            instruction: '‰∏∫ËøôÊÆµÊñáÂ≠óÁîüÊàê‰∏Ä‰∏™ÈÄÇÂêàÁöÑÂõæÁâáÊèèËø∞ÊàñÈÖçÂõæÂª∫ËÆÆ'
          };
          break;
          
        case 'translate':
          endpoint = '/api/translate';
          requestData = {
            text: selectedText,
            instruction: 'ËØ∑Â∞ÜËøôÊÆµÊñáÂ≠óÁøªËØëÊàêËã±Êñá'
          };
          break;
          
        case 'rewrite':
        default:
          endpoint = '/api/rewrite';
          requestData = {
            text: selectedText,
            style: style || 'academic',
            instruction: `ËØ∑ÊåâÁÖß${AI_STYLES.find(s => s.key === style)?.label}ÁöÑÈ£éÊ†ºÊîπÂÜôËøôÊÆµÊñáÂ≠ó`
          };
          break;
      }

      const response = await fetch(`http://localhost:8000${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...requestData,
          openai_config: openAIConfig.apiKey ? {
            api_key: openAIConfig.apiKey,
            model: openAIConfig.model || 'gpt-3.5-turbo',
            temperature: openAIConfig.temperature || 0.7,
            max_tokens: openAIConfig.maxTokens || 1000
          } : null
        })
      });

      if (response.ok) {
        const data = await response.json();
        setAiResult(data.result);
      } else {
        // ÂõûÈÄÄÂà∞Êú¨Âú∞Â§ÑÁêÜ
        const fallbackResult = await handleAIFallback(functionKey, style);
        setAiResult(fallbackResult);
      }
    } catch (error) {
      console.error('AIÂ§ÑÁêÜÂ§±Ë¥•:', error);
      // ÂõûÈÄÄÂà∞Êú¨Âú∞Â§ÑÁêÜ
      const fallbackResult = await handleAIFallback(functionKey, style);
      setAiResult(fallbackResult);
      showNotification('info', '‰ΩøÁî®Êú¨Âú∞AIÂäüËÉΩÂ§ÑÁêÜ');
    } finally {
      setAiLoading(false);
    }
  }

  // AIÂäüËÉΩÁöÑÊú¨Âú∞ÂõûÈÄÄÂ§ÑÁêÜ
  async function handleAIFallback(functionKey: string, style?: string): Promise<string> {
    const content = functionKey === 'summarize' ? (activeDoc?.content || '') : selectedText;
    
    switch (functionKey) {
      case 'summarize':
        const lines = content.split('\n').filter(line => line.trim());
        const headings = lines.filter(line => line.startsWith('#'));
        const summary = headings.length > 0 
          ? `‰∏ªË¶ÅÂÜÖÂÆπÔºö\n${headings.slice(0, 5).map(h => `‚Ä¢ ${h.replace(/^#+\s*/, '')}`).join('\n')}`
          : `ÊñáÊ°£Ê¶ÇË¶ÅÔºö\n‚Ä¢ ÂÖ± ${content.length} Â≠óÁ¨¶\n‚Ä¢ Á∫¶ ${Math.ceil(content.length / 200)} ÂàÜÈíüÈòÖËØªÊó∂Èó¥`;
        return summary;
        
      case 'suggestions':
        return `‰ºòÂåñÂª∫ËÆÆÔºö\n‚Ä¢ Ê£ÄÊü•Ê†áÁÇπÁ¨¶Âè∑‰ΩøÁî®\n‚Ä¢ Ê≥®ÊÑèÊÆµËêΩ‰πãÈó¥ÁöÑÈÄªËæëËøûÊé•\n‚Ä¢ ËÄÉËôë‰ΩøÁî®Êõ¥ÁîüÂä®ÁöÑË°®ËææÊñπÂºè`;
        
      case 'image-generate':
        return `ÈÖçÂõæÂª∫ËÆÆÔºö\n‚Ä¢ ÂèØ‰ª•Ê∑ªÂä†Áõ∏ÂÖ≥ÁöÑÁ§∫ÊÑèÂõæÊàñÂõæË°®\n‚Ä¢ ËÄÉËôë‰ΩøÁî®ÂõæÊ†áÊù•Á™ÅÂá∫ÈáçÁÇπ\n‚Ä¢ Âª∫ËÆÆÈÖçËâ≤‰∏é‰∏ªÈ¢ò‰øùÊåÅ‰∏ÄËá¥`;
        
      case 'translate':
        return `Translation: ${content}\n(Êú¨Âú∞ÁøªËØëÂäüËÉΩÊúâÈôêÔºåÂª∫ËÆÆËøûÊé•ÁΩëÁªúÊúçÂä°)`;
        
      case 'rewrite':
      default:
        return enhanceTextLocally(content, style || 'academic');
    }
  }

  // Âø´ÈÄüAIÊîπÂÜôÂäüËÉΩ
  async function quickAIRewrite(style: string) {
    const ta = textRef.current;
    if (!ta || !activeDoc) return;

    const start = ta.selectionStart || 0;
    const end = ta.selectionEnd || 0;
    const selected = ta.value.slice(start, end);

    if (!selected.trim()) {
      showNotification('info', 'ËØ∑ÂÖàÈÄâÊã©Ë¶ÅÊîπÂÜôÁöÑÊñáÊú¨');
      return;
    }

    const styleName = AI_STYLES.find(s => s.key === style)?.label || style;
    showNotification('info', `Ê≠£Âú®‰ΩøÁî®${styleName}ÊîπÂÜôÊñáÊú¨...`);
    
    setAiLoading(true);
    
    try {
      let requestData = {
        text: selected,
        style: style,
        instruction: `ËØ∑ÊåâÁÖß${styleName}ÁöÑÈ£éÊ†ºÊîπÂÜôËøôÊÆµÊñáÂ≠ó`
      };

      const response = await fetch(`http://localhost:8000/api/rewrite`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...requestData,
          openai_config: openAIConfig.apiKey ? {
            api_key: openAIConfig.apiKey,
            model: openAIConfig.model || 'gpt-3.5-turbo',
            temperature: openAIConfig.temperature || 0.7,
            max_tokens: openAIConfig.maxTokens || 1000
          } : null
        })
      });

      let result;
      if (response.ok) {
        const data = await response.json();
        result = data.result;
      } else {
        // ÂõûÈÄÄÂà∞Êú¨Âú∞Â§ÑÁêÜ
        result = enhanceTextLocally(selected, style);
        showNotification('info', '‰ΩøÁî®Êú¨Âú∞AIÂäüËÉΩÂ§ÑÁêÜ');
      }

      // Áõ¥Êé•ÊõøÊç¢ÈÄâ‰∏≠ÊñáÊú¨
      const next = activeDoc.content.slice(0, start) + result + activeDoc.content.slice(end);
      updateActiveDocument(next);

      setTimeout(() => {
        ta.focus();
        ta.setSelectionRange(start, start + result.length);
      }, 0);

      showNotification('success', 'ÊñáÊú¨ÊîπÂÜôÂÆåÊàê');
      
    } catch (error) {
      console.error('AIÊîπÂÜôÂ§±Ë¥•:', error);
      // ÂõûÈÄÄÂà∞Êú¨Âú∞Â§ÑÁêÜ
      const result = enhanceTextLocally(selected, style);
      const next = activeDoc.content.slice(0, start) + result + activeDoc.content.slice(end);
      updateActiveDocument(next);
      
      setTimeout(() => {
        ta.focus();
        ta.setSelectionRange(start, start + result.length);
      }, 0);
      
      showNotification('info', '‰ΩøÁî®Êú¨Âú∞AIÂäüËÉΩÂ§ÑÁêÜ');
    } finally {
      setAiLoading(false);
    }
  }

  async function rewriteText(style: string) {
    await handleAIFunction('rewrite', style);
  }

  // Â∫îÁî®AIÁªìÊûú
  function applyAIResult() {
    if (!aiResult.trim()) return;

    if (aiFunction === 'summarize') {
      // ÊëòË¶ÅÊèíÂÖ•Âà∞ÊñáÊ°£ÂºÄÂ§¥
      const ta = textRef.current;
      if (!ta || !activeDoc) return;
      
      const summaryText = `## ÊñáÊ°£ÊëòË¶Å\n\n${aiResult}\n\n---\n\n`;
      const next = summaryText + activeDoc.content;
      updateActiveDocument(next);
      
      setTimeout(() => {
        ta.focus();
        ta.setSelectionRange(0, summaryText.length);
      }, 0);
      showNotification('success', 'ÊñáÊ°£ÊëòË¶ÅÂ∑≤Ê∑ªÂä†');
    } else {
      // ÂÖ∂‰ªñÂäüËÉΩÊõøÊç¢ÈÄâ‰∏≠ÊñáÊú¨
      replaceSelectedText(aiResult);
      showNotification('success', 'AIÂ§ÑÁêÜÁªìÊûúÂ∑≤Â∫îÁî®');
    }
    
    setShowAIPanel(false);
    setAiResult('');
  }

  function enhanceTextLocally(text: string, style: string): string {
    // Êú¨Âú∞ÁÆÄÂçïÊîπÂÜôÈÄªËæë
    let result = text.trim();

    switch (style) {
      case 'concise':
        result = result.replace(/ÂÖ∂ÂÆû|ÂÆûÈôÖ‰∏ä|‰∫ãÂÆû‰∏ä/g, '').replace(/ÊúâÁÇπ|‰∏ÄÁÇπ/g, 'Áï•').trim();
        break;
      case 'academic':
        result = result.replace(/ÊàëËßâÂæó/g, 'ÊçÆËßÇÂØü').replace(/Âæà|ÈùûÂ∏∏/g, 'ÂçÅÂàÜ');
        break;
      case 'friendly':
        result = result.replace(/„ÄÇ/g, 'ÔΩû').replace(/Ôºå/g, 'Ôºå');
        break;
    }

    return result;
  }

  function replaceSelectedText(newText: string) {
    const ta = textRef.current;
    if (!ta || !activeDoc) return;

    const start = ta.selectionStart || 0;
    const end = ta.selectionEnd || 0;
    const next = activeDoc.content.slice(0, start) + newText + activeDoc.content.slice(end);
    updateActiveDocument(next);

    setTimeout(() => {
      ta.focus();
      ta.setSelectionRange(start, start + newText.length);
    }, 0);
  }

  function onUpload(e: React.ChangeEvent<HTMLInputElement>) {
    const file = e.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = () => {
      const content = String(reader.result || "");
      const newDoc: Document = {
        id: generateId(),
        title: file.name.replace(/\.(md|markdown|txt)$/i, ""),
        content,
        created: new Date(),
        modified: new Date()
      };
      setDocuments(docs => [...docs, newDoc]);
      setActiveDocId(newDoc.id);
    };
    reader.readAsText(file);
  }

  function downloadMD() {
    if (!activeDoc) return;
    downloadFile(`${activeDoc.title || 'Êú™ÂëΩÂêçÊñáÊ°£'}.md`, activeDoc.content);
    showNotification('success', 'MarkdownÊñá‰ª∂Â∑≤‰∏ãËΩΩ');
  }

  function downloadHTML() {
    if (!activeDoc) return;

    const previewElement = document.getElementById('md-preview');
    const htmlContent = previewElement?.innerHTML || "";
    const fullHTML = `<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${activeDoc.title}</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 40px 20px; color: #333; }
        h1, h2, h3, h4, h5, h6 { margin-top: 24px; margin-bottom: 16px; font-weight: 600; line-height: 1.25; }
        h1 { font-size: 2em; border-bottom: 1px solid #eaecef; padding-bottom: 10px; }
        h2 { font-size: 1.5em; border-bottom: 1px solid #eaecef; padding-bottom: 8px; }
        p { margin-bottom: 16px; }
        pre { background: #f6f8fa; padding: 16px; border-radius: 8px; overflow-x: auto; }
        code { background: #f6f8fa; padding: 2px 6px; border-radius: 4px; font-family: ui-monospace, SFMono-Regular, Consolas, monospace; }
        blockquote { border-left: 4px solid #dfe2e5; margin: 0; padding: 0 20px; color: #6a737d; }
        table { border-collapse: collapse; width: 100%; margin: 16px 0; }
        th, td { border: 1px solid #dfe2e5; padding: 8px 12px; text-align: left; }
        th { background: #f6f8fa; font-weight: 600; }
        img { max-width: 100%; height: auto; }
        ul, ol { padding-left: 24px; margin-bottom: 16px; }
        li { margin-bottom: 4px; }
    </style>
</head>
<body>
${htmlContent}
</body>
</html>`;
    downloadFile(`${activeDoc.title || 'Êú™ÂëΩÂêçÊñáÊ°£'}.html`, fullHTML, 'text/html;charset=utf-8');
    showNotification('success', 'HTMLÊñá‰ª∂Â∑≤‰∏ãËΩΩ');
  }

  function downloadPDF() {
    if (!activeDoc) return;

    // ÁÆÄÂçïÁöÑ PDF ÂØºÂá∫ÊèêÁ§∫
    alert('PDF ÂØºÂá∫ÂäüËÉΩÈúÄË¶ÅÊúçÂä°Á´ØÊîØÊåÅÔºåËØ∑ÂÖàÂØºÂá∫ HTML ÁÑ∂Âêé‰ΩøÁî®ÊµèËßàÂô®ÊâìÂç∞‰∏∫ PDF');
  }

  function jumpToHeading(id: string) {
    const element = document.getElementById(`heading-${id}`);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' });
    }
  }

  const currentTheme = THEMES[theme as keyof typeof THEMES] || THEMES.light;
  const readingTime = calculateReadingTime(activeDoc?.content || '');

  return (
    <div
      className={zen ? 'zen-mode' : ''}
      style={{
        minHeight: '100vh',
        background: currentTheme.bg,
        color: currentTheme.fg,
        transition: 'all 0.3s ease'
      }}
    >
      {/* ÈÄöÁü•Á≥ªÁªü */}
      {notification && (
        <div
          className={`notification ${notification.type}`}
          style={{
            position: 'fixed',
            top: zen ? 20 : 80,
            right: 20,
            zIndex: 2000,
            background: currentTheme.cardBg,
            border: `1px solid var(--border)`,
            borderLeft: `4px solid ${
              notification.type === 'success' ? '#10b981' :
              notification.type === 'error' ? '#ef4444' : 
              '#6366f1'
            }`,
            borderRadius: 8,
            padding: 12,
            boxShadow: '0 4px 12px var(--shadow)',
            maxWidth: 300,
            animation: 'slideIn 0.3s ease-out'
          }}
        >
          <div style={{ 
            display: 'flex', 
            alignItems: 'center', 
            gap: 8,
            fontSize: 14,
            color: currentTheme.fg
          }}>
            <span style={{ 
              color: notification.type === 'success' ? '#10b981' :
                     notification.type === 'error' ? '#ef4444' : 
                     '#6366f1'
            }}>
              {notification.type === 'success' ? '‚úÖ' : 
               notification.type === 'error' ? '‚ùå' : '‚ÑπÔ∏è'}
            </span>
            {notification.message}
          </div>
        </div>
      )}

      {/* Á¶ÖÊ®°ÂºèÈÄÄÂá∫ÊåâÈíÆ */}
      {zen && (
        <button
          className="zen-exit-btn"
          onClick={() => setZen(false)}
          style={{
            position: 'fixed',
            top: 20,
            right: 20,
            zIndex: 1000,
            width: 48,
            height: 48,
            borderRadius: '50%',
            background: 'rgba(0, 0, 0, 0.1)',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(255, 255, 255, 0.1)',
            color: currentTheme.fg,
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            transition: 'all 0.3s ease',
            opacity: 0.7
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.opacity = '1';
            e.currentTarget.style.background = 'rgba(0, 0, 0, 0.2)';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.opacity = '0.7';
            e.currentTarget.style.background = 'rgba(0, 0, 0, 0.1)';
          }}
          title="ÈÄÄÂá∫Á¶ÖÊ®°Âºè"
        >
          <X size={20} />
        </button>
      )}

      {/* È°∂ÈÉ®ÂØºËà™Ê†è */}
      {!zen && (
        <div className="topbar">
          <div className="container" style={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            gap: 12,
            maxWidth: '1600px'
          }}>
            <div style={{ display: 'flex', alignItems: 'center', gap: 12, flex: 1 }}>
              <div style={{
                width: 32,
                height: 32,
                borderRadius: 16,
                background: 'linear-gradient(135deg, #6366f1, #a855f7)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                color: 'white',
                fontWeight: 'bold',
                fontSize: 14
              }}>
                IP
              </div>

              <strong style={{
                fontSize: 18,
                background: 'linear-gradient(135deg, #6366f1, #a855f7)',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
                backgroundClip: 'text'
              }}>
                InkPersona
              </strong>

              <button
                className={`button ${showDocumentList ? 'primary' : ''}`}
                onClick={() => setShowDocumentList(!showDocumentList)}
                data-docs="true"
              >
                <Menu size={16} />
                ÊñáÊ°£ ({documents.length})
              </button>

              <input
                className="input"
                value={activeDoc?.title || ''}
                onChange={e => activeDoc && updateDocument(activeDoc.id, { title: e.target.value })}
                placeholder="ÊñáÊ°£Ê†áÈ¢ò..."
                style={{ minWidth: 200 }}
              />
            </div>

            <div style={{ display: 'flex', alignItems: 'center', gap: 8, flexWrap: 'wrap' }}>
              <button className="button" onClick={createNewDocument}>
                <Plus size={16} />
                Êñ∞Âª∫
              </button>

              <label className="button">
                <Upload size={16} />
                ÂØºÂÖ• .md
                <input
                  type="file"
                  accept=".md,.markdown,.txt"
                  style={{ display: 'none' }}
                  onChange={onUpload}
                />
              </label>

              {/* ÊîπËøõAIÊîπÂÜôÊåâÈíÆÊ†∑Âºè */}
              <button
                className="button ai-button"
                onClick={handleTextSelection}
                title="AI ÊîπÂÜôÈÄâ‰∏≠ÊñáÊú¨ (Ctrl+E)"
                style={{
                  background: 'linear-gradient(135deg, #10b981, #059669)',
                  color: 'white',
                  border: 'none',
                  fontWeight: '500'
                }}
              >
                <Sparkles size={16} />
                AI ÊîπÂÜô
              </button>

              <button
                className={`button ${showSettings ? 'primary' : ''}`}
                onClick={() => setShowSettings(!showSettings)}
                data-settings="true"
              >
                <Settings size={16} />
                ËÆæÁΩÆ
              </button>

              <button
                className={`button ${zen ? 'primary' : ''}`}
                onClick={() => setZen(!zen)}
              >
                {zen ? <Minimize2 size={16} /> : <Maximize2 size={16} />}
                Á¶ÖÊ®°Âºè
              </button>

              <button
                className={`button ${showPreview ? 'primary' : ''}`}
                onClick={() => setShowPreview(!showPreview)}
              >
                {showPreview ? <Eye size={16} /> : <EyeOff size={16} />}
                È¢ÑËßà
              </button>

              <button className="button" onClick={downloadMD}>
                <Download size={16} />
                .md
              </button>

              <button className="button" onClick={downloadHTML}>
                <Download size={16} />
                .html
              </button>

              <button className="button" onClick={downloadPDF}>
                <FileType size={16} />
                PDF
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Ë°®Ê†ºÈÖçÁΩÆÂØπËØùÊ°Ü */}
      {showTableDialog && (
        <div
          className="modal-overlay"
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: 'rgba(0, 0, 0, 0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowTableDialog(false);
            }
          }}
        >
          <div
            className="modal"
            style={{
              background: currentTheme.cardBg,
              border: `1px solid ${currentTheme.border}`,
              borderRadius: 12,
              padding: 24,
              minWidth: 300,
              boxShadow: '0 10px 25px rgba(0, 0, 0, 0.15)'
            }}
          >
            <h3 style={{ margin: '0 0 16px 0', color: currentTheme.fg }}>ÊèíÂÖ•Ë°®Ê†º</h3>
            
            <div style={{ marginBottom: 16 }}>
              <label style={{ display: 'block', marginBottom: 8, color: currentTheme.fg }}>
                Ë°åÊï∞: {tableRows}
              </label>
              <input
                type="range"
                min="2"
                max="10"
                value={tableRows}
                onChange={(e) => setTableRows(Number(e.target.value))}
                style={{ width: '100%' }}
              />
            </div>

            <div style={{ marginBottom: 24 }}>
              <label style={{ display: 'block', marginBottom: 8, color: currentTheme.fg }}>
                ÂàóÊï∞: {tableCols}
              </label>
              <input
                type="range"
                min="2"
                max="8"
                value={tableCols}
                onChange={(e) => setTableCols(Number(e.target.value))}
                style={{ width: '100%' }}
              />
            </div>

            <div style={{ 
              display: 'flex', 
              gap: 12, 
              justifyContent: 'flex-end' 
            }}>
              <button
                className="button ghost"
                onClick={() => setShowTableDialog(false)}
              >
                ÂèñÊ∂à
              </button>
              <button
                className="button primary"
                onClick={insertTable}
              >
                ÊèíÂÖ•Ë°®Ê†º
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ÊñáÊ°£ÂàóË°®Èù¢Êùø */}
      {showDocumentList && (
        <div className="document-list-panel">
          <div style={{ padding: '16px 20px', borderBottom: '1px solid var(--border)' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>
              <h3 style={{ margin: 0 }}>ÊñáÊ°£ÁÆ°ÁêÜ</h3>
              <button className="button ghost" onClick={() => setShowDocumentList(false)}>
                <X size={16} />
              </button>
            </div>
            
            {/* ÊêúÁ¥¢Ê°Ü */}
            <div style={{ marginBottom: 12 }}>
              <input
                className="input"
                type="text"
                placeholder="ÊêúÁ¥¢ÊñáÊ°£Ê†áÈ¢òÊàñÂÜÖÂÆπ..."
                value={docSearch}
                onChange={(e) => setDocSearch(e.target.value)}
                style={{ width: '100%', fontSize: 14 }}
              />
            </div>
            
            {/* ÊéíÂ∫èÈÄâÈ°π */}
            <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
              <span style={{ fontSize: 12, color: 'var(--muted)' }}>ÊéíÂ∫èÔºö</span>
              <select
                className="input"
                value={docSort}
                onChange={(e) => setDocSort(e.target.value as 'modified' | 'created' | 'title')}
                style={{ fontSize: 12, padding: '4px 8px', minWidth: 'auto' }}
              >
                <option value="modified">ÊúÄËøë‰øÆÊîπ</option>
                <option value="created">ÂàõÂª∫Êó∂Èó¥</option>
                <option value="title">Ê†áÈ¢ò</option>
              </select>
              <span style={{ fontSize: 12, color: 'var(--muted)' }}>
                ÂÖ± {filteredAndSortedDocs.length} ‰∏™ÊñáÊ°£
              </span>
            </div>
          </div>
          
          <div style={{ maxHeight: '60vh', overflowY: 'auto' }}>
            {filteredAndSortedDocs.length === 0 ? (
              <div style={{ 
                padding: 40, 
                textAlign: 'center', 
                color: 'var(--muted)',
                fontSize: 14 
              }}>
                {docSearch ? 'Êú™ÊâæÂà∞ÂåπÈÖçÁöÑÊñáÊ°£' : 'ÊöÇÊó†ÊñáÊ°£'}
              </div>
            ) : (
              filteredAndSortedDocs.map(doc => {
                const preview = doc.content.replace(/[#*\-`]/g, '').slice(0, 100);
                const isActive = doc.id === activeDocId;
                
                return (
                  <div
                    key={doc.id}
                    className={`document-item ${isActive ? 'active' : ''}`}
                    onClick={() => {
                      setActiveDocId(doc.id);
                      setShowDocumentList(false);
                      setDocSearch(''); // Ê∏ÖÁ©∫ÊêúÁ¥¢
                    }}
                    style={{
                      padding: 16,
                      borderBottom: '1px solid var(--border)',
                      cursor: 'pointer',
                      background: isActive ? 'rgba(99, 102, 241, 0.1)' : 'transparent',
                      borderLeft: isActive ? '3px solid var(--primary)' : '3px solid transparent',
                      transition: 'all 0.2s ease'
                    }}
                  >
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                      <div style={{ flex: 1, minWidth: 0 }}>
                        <div style={{ 
                          fontWeight: 600, 
                          marginBottom: 4, 
                          fontSize: 14,
                          overflow: 'hidden',
                          textOverflow: 'ellipsis',
                          whiteSpace: 'nowrap'
                        }}>
                          {doc.title}
                        </div>
                        
                        {preview && (
                          <div style={{ 
                            fontSize: 12, 
                            color: 'var(--muted)', 
                            marginBottom: 8,
                            lineHeight: 1.4,
                            overflow: 'hidden',
                            display: '-webkit-box',
                            WebkitLineClamp: 2,
                            WebkitBoxOrient: 'vertical'
                          }}>
                            {preview}...
                          </div>
                        )}
                        
                        <div style={{ 
                          fontSize: 11, 
                          color: 'var(--muted)',
                          display: 'flex',
                          gap: 12,
                          alignItems: 'center'
                        }}>
                          <span>üìÖ {doc.modified.toLocaleDateString()}</span>
                          <span>üìù {doc.content.length} Â≠óÁ¨¶</span>
                          <span>‚è±Ô∏è {Math.ceil(doc.content.length / 200)} ÂàÜÈíü</span>
                        </div>
                      </div>
                      
                      <div style={{ display: 'flex', gap: 4, marginLeft: 8 }}>
                        <button
                          className="button ghost"
                          onClick={(e) => {
                            e.stopPropagation();
                            duplicateDocument(doc.id);
                          }}
                          style={{ padding: '4px 6px', fontSize: 11 }}
                          title="Â§çÂà∂ÊñáÊ°£"
                        >
                          <FileText size={12} />
                        </button>
                        {documents.length > 1 && (
                          <button
                            className="button ghost"
                            onClick={(e) => {
                              e.stopPropagation();
                              if (confirm(`Á°ÆÂÆöË¶ÅÂà†Èô§"${doc.title}"ÂêóÔºü`)) {
                                deleteDocument(doc.id);
                              }
                            }}
                            style={{ padding: '4px 6px', color: '#ef4444', fontSize: 11 }}
                            title="Âà†Èô§ÊñáÊ°£"
                          >
                            <X size={12} />
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })
            )}
          </div>
          
          <div style={{ 
            padding: 12, 
            borderTop: '1px solid var(--border)',
            background: 'var(--accent)'
          }}>
            <button
              className="button primary"
              onClick={() => {
                createNewDocument();
                setShowDocumentList(false);
              }}
              style={{ width: '100%', fontSize: 14, padding: 8 }}
            >
              <Plus size={16} />
              Êñ∞Âª∫ÊñáÊ°£
            </button>
          </div>
        </div>
      )}

      {/* AI Èù¢Êùø */}
      {showAIPanel && (
        <div className="ai-panel">
          <div style={{ padding: '16px 20px', borderBottom: '1px solid var(--border)', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <h3 style={{ margin: 0, display: 'flex', alignItems: 'center', gap: 8 }}>
              <Wand2 size={16} />
              AI Êô∫ËÉΩÂä©Êâã
            </h3>
            <button className="button ghost" onClick={() => setShowAIPanel(false)}>
              <X size={16} />
            </button>
          </div>

          <div style={{ padding: 20 }}>
            {/* ÂäüËÉΩÈÄâÊã© */}
            <div style={{ marginBottom: 20 }}>
              <strong style={{ marginBottom: 12, display: 'block' }}>ÈÄâÊã©AIÂäüËÉΩ:</strong>
              <div style={{ display: 'grid', gap: 8, gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))' }}>
                {AI_FUNCTIONS.map(func => (
                  <button
                    key={func.key}
                    className={`ai-function-button ${aiFunction === func.key ? 'active' : ''}`}
                    onClick={() => setAiFunction(func.key)}
                    disabled={func.needsSelection && !selectedText.trim()}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: 8,
                      padding: 12,
                      border: aiFunction === func.key ? '2px solid var(--primary)' : '1px solid var(--border)',
                      borderRadius: 8,
                      background: aiFunction === func.key ? 'rgba(99, 102, 241, 0.1)' : 'var(--cardBg)',
                      cursor: (func.needsSelection && !selectedText.trim()) ? 'not-allowed' : 'pointer',
                      opacity: (func.needsSelection && !selectedText.trim()) ? 0.5 : 1,
                      transition: 'all 0.2s ease'
                    }}
                  >
                    <span style={{ fontSize: 16 }}>{func.icon}</span>
                    <div style={{ textAlign: 'left', flex: 1 }}>
                      <div style={{ fontWeight: 500, fontSize: 14 }}>{func.label}</div>
                      <div style={{ fontSize: 12, color: 'var(--muted)' }}>{func.description}</div>
                    </div>
                  </button>
                ))}
              </div>
            </div>

            {/* ÈÄâ‰∏≠ÊñáÊú¨ÊòæÁ§∫ */}
            {selectedText && (
              <div style={{ marginBottom: 16, padding: 12, background: 'var(--accent)', borderRadius: 8, fontSize: 14 }}>
                <strong>ÈÄâ‰∏≠ÊñáÊú¨:</strong>
                <div style={{ marginTop: 8, fontStyle: 'italic', maxHeight: 100, overflow: 'auto' }}>
                  "{selectedText}"
                </div>
              </div>
            )}

            {/* Ê†∑ÂºèÈÄâÊã©Ôºà‰ªÖÊîπÂÜôÂäüËÉΩÊó∂ÊòæÁ§∫Ôºâ */}
            {aiFunction === 'rewrite' && (
              <div style={{ marginBottom: 20 }}>
                <strong style={{ marginBottom: 8, display: 'block' }}>ÊîπÂÜôÈ£éÊ†º:</strong>
                <div style={{ display: 'grid', gap: 8, gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))' }}>
                  {AI_STYLES.map(style => (
                    <button
                      key={style.key}
                      className="ai-style-button"
                      onClick={() => rewriteText(style.key)}
                      disabled={aiLoading}
                      style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: 8,
                        padding: 12,
                        border: '1px solid var(--border)',
                        borderRadius: 8,
                        background: 'var(--cardBg)',
                        cursor: aiLoading ? 'not-allowed' : 'pointer',
                        transition: 'all 0.2s ease',
                        opacity: aiLoading ? 0.6 : 1
                      }}
                    >
                      <span>{style.label}</span>
                      <span style={{ fontSize: 12, color: 'var(--muted)', flex: 1, textAlign: 'left' }}>
                        {style.description}
                      </span>
                      {aiLoading && <RefreshCw size={14} className="spin" />}
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* ÊâßË°åÊåâÈíÆÔºàÈùûÊîπÂÜôÂäüËÉΩÔºâ */}
            {aiFunction !== 'rewrite' && (
              <div style={{ marginBottom: 20 }}>
                <button
                  className="button primary"
                  onClick={() => handleAIFunction(aiFunction)}
                  disabled={aiLoading || (AI_FUNCTIONS.find(f => f.key === aiFunction)?.needsSelection && !selectedText.trim())}
                  style={{
                    width: '100%',
                    padding: 12,
                    background: 'linear-gradient(135deg, #6366f1, #a855f7)',
                    color: 'white',
                    border: 'none',
                    fontWeight: '500'
                  }}
                >
                  {aiLoading ? (
                    <span style={{ display: 'flex', alignItems: 'center', gap: 8, justifyContent: 'center' }}>
                      <RefreshCw size={16} className="spin" />
                      Â§ÑÁêÜ‰∏≠...
                    </span>
                  ) : (
                    `ÊâßË°å${AI_FUNCTIONS.find(f => f.key === aiFunction)?.label}`
                  )}
                </button>
              </div>
            )}

            {/* AIÁªìÊûúÊòæÁ§∫ */}
            {aiResult && (
              <div style={{ marginBottom: 20, padding: 16, background: 'var(--accent)', borderRadius: 8, border: '1px solid var(--border)' }}>
                <strong style={{ marginBottom: 8, display: 'block', color: 'var(--primary)' }}>AI Â§ÑÁêÜÁªìÊûú:</strong>
                <div style={{ 
                  whiteSpace: 'pre-wrap', 
                  lineHeight: 1.6, 
                  maxHeight: 300, 
                  overflow: 'auto',
                  fontSize: 14
                }}>
                  {aiResult}
                </div>
                <div style={{ marginTop: 12, display: 'flex', gap: 8 }}>
                  <button
                    className="button primary"
                    onClick={applyAIResult}
                    style={{ flex: 1 }}
                  >
                    Â∫îÁî®ÁªìÊûú
                  </button>
                  <button
                    className="button ghost"
                    onClick={() => setAiResult('')}
                  >
                    ÈáçÊñ∞ÁîüÊàê
                  </button>
                </div>
              </div>
            )}

            <div style={{ fontSize: 12, color: 'var(--muted)', textAlign: 'center' }}>
              Âø´Êç∑ÈîÆ: Ctrl/Cmd + E Âø´ÈÄüÈÄâÊã©ÊñáÊú¨ËøõË°åAIÂ§ÑÁêÜ
            </div>
          </div>
        </div>
      )}

      {/* ËÆæÁΩÆÈù¢Êùø */}
      {showSettings && (
        <div className="settings-panel">
          <h3>ÁºñËæëÂô®ËÆæÁΩÆ</h3>

          {/* OpenAI ÈÖçÁΩÆ */}
          <div className="setting-group">
            <h4 style={{ marginBottom: 12, color: 'var(--primary)' }}>ü§ñ OpenAI API ÈÖçÁΩÆ</h4>
            <div style={{ marginBottom: 12 }}>
              <label style={{ display: 'block', marginBottom: 4 }}>API Key</label>
              <input
                className="input"
                type="password"
                value={openAIConfig.apiKey || ''}
                onChange={(e) => setOpenAIConfig(prev => ({ ...prev, apiKey: e.target.value }))}
                placeholder="sk-..."
                style={{ width: '100%', fontFamily: 'monospace' }}
              />
              <div style={{ fontSize: 12, color: 'var(--muted)', marginTop: 4 }}>
                ËØ∑ËæìÂÖ•‰Ω†ÁöÑOpenAI API KeyÔºåÁî®‰∫éAIÂäüËÉΩ
              </div>
            </div>

            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12, marginBottom: 12 }}>
              <div>
                <label style={{ display: 'block', marginBottom: 4 }}>Ê®°Âûã</label>
                <select
                  className="input"
                  value={openAIConfig.model || 'gpt-3.5-turbo'}
                  onChange={(e) => setOpenAIConfig(prev => ({ ...prev, model: e.target.value }))}
                >
                  <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
                  <option value="gpt-4">GPT-4</option>
                  <option value="gpt-4-turbo-preview">GPT-4 Turbo</option>
                </select>
              </div>
              <div>
                <label style={{ display: 'block', marginBottom: 4 }}>
                  ÂàõÈÄ†ÊÄß ({openAIConfig.temperature || 0.7})
                </label>
                <input
                  type="range"
                  min="0"
                  max="2"
                  step="0.1"
                  value={openAIConfig.temperature || 0.7}
                  onChange={(e) => setOpenAIConfig(prev => ({ ...prev, temperature: Number(e.target.value) }))}
                  style={{ width: '100%' }}
                />
              </div>
            </div>

            <div style={{ marginBottom: 16 }}>
              <label style={{ display: 'block', marginBottom: 4 }}>
                ÊúÄÂ§ßËæìÂá∫ÈïøÂ∫¶: {openAIConfig.maxTokens || 1000}
              </label>
              <input
                type="range"
                min="100"
                max="4000"
                step="100"
                value={openAIConfig.maxTokens || 1000}
                onChange={(e) => setOpenAIConfig(prev => ({ ...prev, maxTokens: Number(e.target.value) }))}
                style={{ width: '100%' }}
              />
            </div>

            <div style={{ 
              padding: 12, 
              background: openAIConfig.apiKey ? 'rgba(16, 185, 129, 0.1)' : 'rgba(239, 68, 68, 0.1)',
              border: `1px solid ${openAIConfig.apiKey ? '#10b981' : '#ef4444'}`,
              borderRadius: 8,
              fontSize: 12
            }}>
              {openAIConfig.apiKey ? (
                <span style={{ color: '#10b981' }}>‚úÖ API Key Â∑≤ÈÖçÁΩÆÔºåAIÂäüËÉΩÂèØÁî®</span>
              ) : (
                <span style={{ color: '#ef4444' }}>‚ö†Ô∏è Êú™ÈÖçÁΩÆAPI KeyÔºåÂ∞Ü‰ΩøÁî®Êú¨Âú∞ÁÆÄÂåñÁâàAIÂäüËÉΩ</span>
              )}
            </div>
          </div>

          <div className="setting-group">
            <label>‰∏ªÈ¢òÊ®°Âºè</label>
            <div style={{ display: 'flex', gap: 8 }}>
              {Object.keys(THEMES).map((key) => (
                <button
                  key={key}
                  className={`button ${theme === key ? 'primary' : ''}`}
                  onClick={() => setTheme(key)}
                  style={{ padding: '6px 10px', fontSize: 12 }}
                >
                  {key === 'light' && <Sun size={12} />}
                  {key === 'dark' && <Moon size={12} />}
                  {key === 'sepia' && <Palette size={12} />}
                  <span style={{ marginLeft: 4, textTransform: 'capitalize' }}>{key}</span>
                </button>
              ))}
            </div>
          </div>

          <div className="setting-group">
            <label>Â≠ó‰ΩìÂ§ßÂ∞è: {fontSize}px</label>
            <input
              type="range"
              min="12"
              max="24"
              value={fontSize}
              onChange={e => setFontSize(Number(e.target.value))}
              style={{ width: '100%' }}
            />
          </div>

          <div className="setting-group">
            <label>È¢ÑËßàÂÆΩÂ∫¶: {lineWidth}px</label>
            <input
              type="range"
              min="600"
              max="1200"
              value={lineWidth}
              onChange={e => setLineWidth(Number(e.target.value))}
              style={{ width: '100%' }}
            />
          </div>

          <div className="setting-group">
            <label style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
              <input
                type="checkbox"
                checked={showTOC}
                onChange={e => setShowTOC(e.target.checked)}
              />
              ÊòæÁ§∫ÁõÆÂΩïÂØºËà™
            </label>
          </div>
        </div>
      )}

      {/* Âø´Êç∑ÈîÆÂ∏ÆÂä©Èù¢Êùø */}
      {showHelpPanel && (
        <div
          className="modal-overlay"
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: 'rgba(0, 0, 0, 0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowHelpPanel(false);
            }
          }}
        >
          <div
            className="modal"
            style={{
              background: currentTheme.cardBg,
              border: `1px solid ${currentTheme.border}`,
              borderRadius: 12,
              padding: 24,
              minWidth: 600,
              maxWidth: 800,
              maxHeight: '90vh',
              overflowY: 'auto',
              boxShadow: '0 10px 25px rgba(0, 0, 0, 0.15)'
            }}
          >
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 20 }}>
              <h3 style={{ margin: 0, color: currentTheme.fg }}>Âø´Êç∑ÈîÆÂ∏ÆÂä©</h3>
              <button className="button ghost" onClick={() => setShowHelpPanel(false)}>
                <X size={16} />
              </button>
            </div>
            
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 20, fontSize: 14 }}>
              <div>
                <h4 style={{ color: currentTheme.primary, marginBottom: 12 }}>Âü∫Êú¨ÁºñËæë</h4>
                <div style={{ display: 'grid', gap: 8 }}>
                  <div><kbd>Ctrl + S</kbd> ‰øùÂ≠òÊñáÊ°£</div>
                  <div><kbd>Ctrl + B</kbd> Âä†Á≤óÊñáÊú¨</div>
                  <div><kbd>Ctrl + I</kbd> Êñú‰ΩìÊñáÊú¨</div>
                  <div><kbd>Ctrl + K</kbd> ÊèíÂÖ•ÈìæÊé•</div>
                  <div><kbd>/</kbd> ÊâìÂºÄÊèíÂÖ•ËèúÂçï</div>
                  <div><kbd>Escape</kbd> ÂÖ≥Èó≠Èù¢Êùø/ÈÄÄÂá∫Á¶ÖÊ®°Âºè</div>
                </div>

                <h4 style={{ color: currentTheme.primary, marginBottom: 12, marginTop: 20 }}>ÊñáÊ°£ÁÆ°ÁêÜ</h4>
                <div style={{ display: 'grid', gap: 8 }}>
                  <div><kbd>Ctrl + N</kbd> Êñ∞Âª∫ÊñáÊ°£</div>
                  <div><kbd>Ctrl + D</kbd> ÊñáÊ°£ÂàóË°®</div>
                  <div><kbd>Ctrl + ,</kbd> ËÆæÁΩÆÈù¢Êùø</div>
                  <div><kbd>F1</kbd> / <kbd>Shift + ?</kbd> Â∏ÆÂä©Èù¢Êùø</div>
                </div>
              </div>

              <div>
                <h4 style={{ color: currentTheme.primary, marginBottom: 12 }}>AIÂäüËÉΩ</h4>
                <div style={{ display: 'grid', gap: 8 }}>
                  <div><kbd>Ctrl + E</kbd> AIÊô∫ËÉΩÂä©Êâã</div>
                  <div><kbd>Ctrl + Shift + A</kbd> Â≠¶ÊúØÈ£éÊ†ºÊîπÂÜô</div>
                  <div><kbd>Ctrl + Shift + C</kbd> ÂàõÊÑèÈ£éÊ†ºÊîπÂÜô</div>
                  <div><kbd>Ctrl + Shift + S</kbd> ÁÆÄÊ¥ÅÈ£éÊ†ºÊîπÂÜô</div>
                  <div><kbd>Ctrl + Shift + B</kbd> ÂïÜÂä°È£éÊ†ºÊîπÂÜô</div>
                  <div><kbd>Ctrl + Shift + F</kbd> ÂèãÂ•ΩÈ£éÊ†ºÊîπÂÜô</div>
                  <div><kbd>Ctrl + Shift + T</kbd> ÊäÄÊúØÈ£éÊ†ºÊîπÂÜô</div>
                </div>

                <h4 style={{ color: currentTheme.primary, marginBottom: 12, marginTop: 20 }}>ÂÖ∂‰ªñÂäüËÉΩ</h4>
                <div style={{ display: 'grid', gap: 8 }}>
                  <div>ÊãñÊãΩÂõæÁâáÂà∞ÁºñËæëÂô®‰∏ä‰º†</div>
                  <div>ÁÇπÂáªÁ©∫ÁôΩÂå∫ÂüüÂÖ≥Èó≠Èù¢Êùø</div>
                  <div>Á¶ÖÊ®°Âºè‰∏ãESCÈÄÄÂá∫</div>
                  <div>ÊîØÊåÅMarkdownËØ≠Ê≥ï</div>
                </div>
              </div>
            </div>

            <div style={{ 
              marginTop: 20, 
              padding: 12, 
              background: currentTheme.accent, 
              borderRadius: 8, 
              fontSize: 12, 
              color: currentTheme.muted
            }}>
              üí° ÊèêÁ§∫ÔºöAIÊîπÂÜôÂäüËÉΩÈúÄË¶ÅÂÖàÈÄâÊã©ÊñáÊú¨ÔºåÁÑ∂Âêé‰ΩøÁî®ÂØπÂ∫îÁöÑÂø´Êç∑ÈîÆÂç≥ÂèØÂø´ÈÄüÊîπÂÜô„ÄÇÊâÄÊúâAIÂäüËÉΩÈÉΩÊîØÊåÅÊú¨Âú∞ÂõûÈÄÄ„ÄÇ
            </div>
          </div>
        </div>
      )}

      <div className="container" style={{ paddingTop: zen ? 0 : 12, maxWidth: '1600px' }}>
        <div className={zen ? "main-layout zen" : "main-layout"}>
          {/* ‰æßËæπÁõÆÂΩï */}
          {showTOC && toc.length > 0 && !zen && (
            <div className="toc-sidebar">
              <div style={{ padding: '12px 16px', borderBottom: '1px solid var(--border)', fontWeight: 600, fontSize: 14 }}>
                <Hash size={16} style={{ display: 'inline', marginRight: 6 }} />
                ÁõÆÂΩïÂØºËà™
              </div>
              <div style={{ padding: '8px 0', maxHeight: '60vh', overflowY: 'auto' }}>
                {toc.map((item, index) => (
                  <div
                    key={index}
                    className="toc-item"
                    style={{
                      paddingLeft: 16 + (item.level - 1) * 16,
                      paddingRight: 16,
                      paddingTop: 6,
                      paddingBottom: 6,
                      cursor: 'pointer',
                      fontSize: 14 - (item.level - 1),
                      color: item.level === 1 ? 'var(--fg)' : 'var(--muted)',
                      borderLeft: item.level === 1 ? '3px solid var(--primary)' : 'none',
                      transition: 'all 0.2s ease'
                    }}
                    onClick={() => jumpToHeading(item.id)}
                  >
                    {item.text}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* ‰∏ªÁºñËæëÂå∫Âüü - ÈáçÊñ∞ËÆæËÆ°Âõ∫ÂÆöÂ∞∫ÂØ∏Â∏ÉÂ±Ä */}
          <div className="editor-area" style={{ 
            width: '100%',
            minWidth: zen ? '100vw' : '800px',
            maxWidth: zen ? '100vw' : '1400px',
            height: zen ? '100vh' : '90vh',
            minHeight: zen ? '100vh' : '90vh',
            margin: zen ? '0' : '0 auto',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <div className="card" style={{
              padding: zen ? 20 : 20,
              border: zen ? 'none' : undefined,
              boxShadow: zen ? 'none' : undefined,
              background: zen ? 'transparent' : undefined,
              height: '100%',
              width: '100%',
              display: 'flex',
              flexDirection: 'column',
              minHeight: 0,
              flex: 1
            }}>
              {/* Â∑•ÂÖ∑Ê†è */}
              {!zen && (
                <div className="toolbar">
                  {TOOLBAR.map(t => (
                    <button
                      key={t.key}
                      className="button"
                      title={t.tip}
                      onClick={() => applyToolbar(t)}
                    >
                      {React.createElement(t.icon, { size: 16 })}
                    </button>
                  ))}
                  <div style={{ flex: 1 }}></div>
                  <span className="badge">ËæìÂÖ• "/" ÊâìÂºÄÊèíÂÖ•ËèúÂçï</span>
                </div>
              )}

              {/* Slash ÂëΩ‰ª§ËèúÂçï */}
              {slashOpen && (
                <div
                  ref={slashRef}
                  className="slash-menu"
                  style={{
                    position: 'fixed',
                    left: slashPos.x,
                    top: slashPos.y,
                    zIndex: 1000
                  }}
                >
                  {filteredSlashCommands.map(cmd => (
                    <div
                      key={cmd.key}
                      className="slash-item"
                      onClick={() => insertSnippet(cmd.snippet)}
                    >
                      {cmd.label}
                    </div>
                  ))}
                </div>
              )}

              {/* ÁºñËæëÂô®Â∏ÉÂ±Ä - ÁúüÊ≠£Âõ∫ÂÆöÂ∞∫ÂØ∏Â∏ÉÂ±Ä */}
              <div 
                className="editor-workspace"
                style={{
                  display: 'grid',
                  gridTemplateColumns: showPreview && !zen ? '1fr 8px 1fr' : '1fr',
                  gap: showPreview && !zen ? '0' : '0',
                  width: '100%',
                  height: '100%',
                  minHeight: zen ? 'calc(100vh - 140px)' : 'calc(90vh - 100px)',
                  flex: 1
                }}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                onDrop={handleDrop}
              >
                {/* ÊãñÊãΩË¶ÜÁõñÂ±Ç */}
                {dragOver && (
                  <div
                    style={{
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      right: 0,
                      bottom: 0,
                      background: 'rgba(99, 102, 241, 0.1)',
                      border: '2px dashed var(--primary)',
                      borderRadius: 12,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      zIndex: 10,
                      color: 'var(--primary)',
                      fontSize: 18,
                      fontWeight: 600
                    }}
                  >
                    <div style={{ textAlign: 'center' }}>
                      <Image size={48} style={{ marginBottom: 12, display: 'block', margin: '0 auto 12px' }} />
                      <div style={{ fontSize: 18, fontWeight: 600, marginBottom: 8 }}>
                        ÊãñÊãΩÂõæÁâáÂà∞Ê≠§Â§Ñ‰∏ä‰º†
                      </div>
                      <div style={{ fontSize: 14, opacity: 0.8 }}>
                        ÊîØÊåÅ JPG, PNG, GIF, WebP Ê†ºÂºèÔºåÊúÄÂ§ß 5MB
                      </div>
                    </div>
                  </div>
                )}

                {/* ‰∏ä‰º†ËøõÂ∫¶Êù° */}
                {uploadProgress > 0 && (
                  <div
                    style={{
                      position: 'absolute',
                      top: 10,
                      left: 10,
                      right: 10,
                      height: 4,
                      background: 'var(--accent)',
                      borderRadius: 2,
                      zIndex: 15
                    }}
                  >
                    <div
                      style={{
                        height: '100%',
                        background: 'var(--primary)',
                        borderRadius: 2,
                        width: `${uploadProgress}%`,
                        transition: 'width 0.3s ease'
                      }}
                    />
                  </div>
                )}

                {/* ÁºñËæëÂå∫Âüü */}
                <div className="editor-pane" style={{ 
                  height: '100%',
                  display: 'flex',
                  flexDirection: 'column',
                  minHeight: zen ? 'calc(100vh - 140px)' : 'calc(90vh - 100px)'
                }}>
                  <textarea
                    ref={textRef}
                    className="textarea"
                    style={{
                      fontSize: fontSize,
                      lineHeight: 1.6,
                      width: '100%',
                      height: '100%',
                      minHeight: zen ? 'calc(100vh - 180px)' : 'calc(90vh - 140px)',
                      background: zen ? 'transparent' : undefined,
                      border: zen ? 'none' : undefined,
                      outline: zen ? 'none' : undefined,
                      flex: 1,
                      boxSizing: 'border-box',
                      resize: 'none'
                    }}
                    value={activeDoc?.content || ''}
                    onChange={(e) => updateActiveDocument(e.target.value)}
                    onSelect={e => {
                      const target = e.target as HTMLTextAreaElement;
                      const selected = target.value.slice(target.selectionStart, target.selectionEnd);
                      if (selected.trim()) {
                        setSelectedText(selected);
                      }
                    }}
                    placeholder="# ‰ªéËøôÈáåÂºÄÂßãÂÜô‰Ωú..."
                  />
                  {!zen && (
                    <div className="editor-stats">
                      <span><Save size={14}/> {status}</span>
                      <span><FileText size={14}/> {wordCount.chars} Â≠óÁ¨¶</span>
                      <span><BookOpen size={14}/> {wordCount.words} ËØç</span>
                      <span><Clock size={14}/> Á∫¶ {readingTime} ÂàÜÈíüÈòÖËØª</span>
                    </div>
                  )}
                </div>

                {showPreview && !zen && <div className="divider"></div>}

                {showPreview && !zen && (
                  <div className="preview-section" style={{ 
                    minHeight: 'calc(90vh - 100px)', 
                    height: 'calc(90vh - 100px)', 
                    maxHeight: 'calc(90vh - 100px)',
                    display: 'flex',
                    flexDirection: 'column'
                  }}>
                    <div className="preview-header">
                      <div>È¢ÑËßà</div>
                      <div>ÂÆΩÂ∫¶ {Math.round(lineWidth)}px</div>
                    </div>
                    <div
                      id="md-preview"
                      className="prose"
                      style={{
                        border: '1px solid var(--border)',
                        borderRadius: 12,
                        padding: 20,
                        overflow: 'auto',
                        width: '100%',
                        maxWidth: lineWidth,
                        height: 'calc(90vh - 140px)',
                        minHeight: 'calc(90vh - 140px)',
                        maxHeight: 'calc(90vh - 140px)',
                        flex: 1,
                        boxSizing: 'border-box'
                      }}
                    >
                      <ReactMarkdown
                        remarkPlugins={[remarkGfm]}
                        rehypePlugins={[rehypeRaw]}
                        components={{
                          img: ({node, src, alt, ...props}) => {
                            console.log('üñºÔ∏è ReactMarkdown Êé•Êî∂Âà∞ÂõæÁâáÂèÇÊï∞:', {
                              src: src ? (src.length > 100 ? src.substring(0, 100) + '...' : src) : 'undefined/null',
                              srcLength: src?.length || 0,
                              alt,
                              isBase64: src?.startsWith('data:image/'),
                              isImageId: src?.startsWith('img_'),
                              props
                            });
                            
                            // Â¶ÇÊûúsrc‰∏∫Á©∫ÊàñundefinedÔºåÂ∞ùËØï‰ªéprops‰∏≠Ëé∑Âèñ
                            let actualSrc = src || props.src;
                            
                            // Ê£ÄÊü•ÊòØÂê¶ÊòØÂõæÁâáIDÂºïÁî®
                            if (actualSrc?.startsWith('img_')) {
                              const imageData = imageDataMap.get(actualSrc);
                              if (imageData) {
                                console.log('üì∑ ‰ΩøÁî®ÂõæÁâáIDÂºïÁî®ÔºåÊâæÂà∞ÂØπÂ∫îÊï∞ÊçÆ:', {
                                  imageId: actualSrc,
                                  dataLength: imageData.length
                                });
                                actualSrc = imageData;
                              } else {
                                console.error('‚ùå ÂõæÁâáIDÂºïÁî®Êó†Êïà:', actualSrc);
                                return (
                                  <div style={{
                                    border: '2px dashed #ef4444',
                                    padding: '20px',
                                    background: '#fef2f2',
                                    color: '#ef4444',
                                    textAlign: 'center',
                                    borderRadius: 8,
                                    margin: '16px 0'
                                  }}>
                                    ‚ùå ÂõæÁâáIDÂºïÁî®Êó†Êïà
                                    <br />
                                    <small>ID: {actualSrc}</small>
                                  </div>
                                );
                              }
                            }
                            
                            const isBase64 = actualSrc?.startsWith('data:image/');
                            
                            if (!actualSrc) {
                              console.error('‚ùå ÂõæÁâásrc‰∏∫Á©∫ÔºåÊó†Ê≥ïÊ∏≤Êüì');
                              return (
                                <div style={{
                                  border: '2px dashed #ef4444',
                                  padding: '20px',
                                  background: '#fef2f2',
                                  color: '#ef4444',
                                  textAlign: 'center',
                                  borderRadius: 8,
                                  margin: '16px 0'
                                }}>
                                  ‚ùå ÂõæÁâáÊ∫êÂú∞ÂùÄ‰∏∫Á©∫
                                  <br />
                                  <small>alt: {alt}</small>
                                  <br />
                                  <small>ÂéüÂßãsrc: {src}</small>
                                </div>
                              );
                            }
                            
                            // Ê∑ªÂä†base64ÂõæÁâáÁöÑÁâπÊÆäÂ§ÑÁêÜ
                            if (isBase64 && actualSrc) {
                              // È™åËØÅbase64Ê†ºÂºè
                              const [header, data] = actualSrc.split(',');
                              if (!header || !data) {
                                console.error('‚ùå Êó†ÊïàÁöÑbase64Ê†ºÂºè:', actualSrc.substring(0, 100));
                                return (
                                  <div style={{
                                    border: '2px dashed #ef4444',
                                    padding: '20px',
                                    background: '#fef2f2',
                                    color: '#ef4444',
                                    textAlign: 'center',
                                    borderRadius: 8,
                                    margin: '16px 0'
                                  }}>
                                    ‚ùå Base64ÂõæÁâáÊ†ºÂºèÈîôËØØ
                                  </div>
                                );
                              }
                              
                              console.log('üì∑ Base64ÂõæÁâáËØ¶ÊÉÖ:', {
                                alt: alt,
                                mimeType: header,
                                dataLength: data.length,
                                isValidFormat: header.includes('data:image/')
                              });
                            }
                            
                            return (
                              <div style={{ margin: '16px 0' }}>
                                {/* Ë∞ÉËØï‰ø°ÊÅØ */}
                                <div style={{ 
                                  fontSize: '12px', 
                                  color: '#666', 
                                  marginBottom: '8px',
                                  fontFamily: 'monospace',
                                  background: '#f5f5f5',
                                  padding: '4px 8px',
                                  borderRadius: '4px'
                                }}>
                                  üñºÔ∏è {isBase64 ? `Base64ÂõæÁâá (${actualSrc?.length} Â≠óÁ¨¶)` : `Â§ñÈÉ®ÂõæÁâá: ${actualSrc}`}
                                  {src?.startsWith('img_') && <span style={{color: '#10b981'}}> [IDÂºïÁî®]</span>}
                                </div>
                                
                                <img 
                                  {...props}
                                  src={actualSrc}
                                  alt={alt || 'ÂõæÁâá'}
                                  style={{
                                    maxWidth: '100%',
                                    height: 'auto',
                                    borderRadius: 8,
                                    boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)',
                                    display: 'block',
                                    border: isBase64 ? '2px solid #10b981' : '1px solid #ddd'
                                  }}
                                  onError={(e) => {
                                    const target = e.target as HTMLImageElement;
                                    console.error('‚ùå ÂõæÁâáÂä†ËΩΩÂ§±Ë¥•ËØ¶ÊÉÖ:', {
                                      originalSrc: src,
                                      actualSrc: actualSrc,
                                      srcFromTarget: target.src,
                                      alt: target.alt,
                                      isBase64: isBase64,
                                      isImageId: src?.startsWith('img_'),
                                      naturalWidth: target.naturalWidth,
                                      naturalHeight: target.naturalHeight,
                                      error: 'ÂõæÁâáÊó†Ê≥ïËß£Á†ÅÊàñÂä†ËΩΩ'
                                    });
                                    
                                    // ÁÆÄÂçïÂú∞‰øÆÊîπÊ†∑ÂºèÔºå‰∏çÊìç‰ΩúDOMÁªìÊûÑ
                                    target.style.display = 'none';
                                    
                                    // Âú®Áà∂ÂÖÉÁ¥†‰∏≠Ê∑ªÂä†ÈîôËØØÊèêÁ§∫
                                    const errorDiv = document.createElement('div');
                                    errorDiv.className = 'image-error-placeholder';
                                    errorDiv.style.cssText = `
                                      border: 2px dashed #ef4444;
                                      padding: 20px;
                                      background: #fef2f2;
                                      color: #ef4444;
                                      text-align: center;
                                      font-size: 14px;
                                      border-radius: 8px;
                                      margin: 16px 0;
                                      min-height: 80px;
                                      display: flex;
                                      align-items: center;
                                      justify-content: center;
                                      flex-direction: column;
                                    `;
                                    
                                    let errorMessage: string;
                                    if (isBase64) {
                                      const [header, data] = actualSrc.split(',');
                                      errorMessage = `‚ùå Base64ÂõæÁâáÊòæÁ§∫Â§±Ë¥•<br/><small style="opacity: 0.8">Êï∞ÊçÆ: ${header}<br/>ÈïøÂ∫¶: ${data?.length || 0} Â≠óÁ¨¶</small>`;
                                    } else if (actualSrc?.includes('ÂõæÁâáÂ§ÑÁêÜÂ§±Ë¥•')) {
                                      errorMessage = '‚ùå ÂõæÁâáÂ§ÑÁêÜÂ§±Ë¥•<br/><small style="opacity: 0.8">ËØ∑ÈáçÊñ∞‰∏ä‰º†ÂõæÁâá</small>';
                                    } else {
                                      const shortSrc = actualSrc && actualSrc.length > 50 ? actualSrc.substring(0, 50) + '...' : actualSrc || 'Êó†ÂõæÁâáÂú∞ÂùÄ';
                                      errorMessage = `‚ùå ÂõæÁâáÂä†ËΩΩÂ§±Ë¥•<br/><small style="opacity: 0.8">${shortSrc}</small>`;
                                    }
                                    
                                    errorDiv.innerHTML = errorMessage;
                                    
                                    // ÂÆâÂÖ®Âú∞ÊèíÂÖ•ÈîôËØØ‰ø°ÊÅØ
                                    if (target.parentElement && !target.parentElement.querySelector('.image-error-placeholder')) {
                                      target.parentElement.appendChild(errorDiv);
                                    }
                                  }}
                                  onLoad={(e) => {
                                    const target = e.target as HTMLImageElement;
                                    console.log('‚úÖ ÂõæÁâáÂä†ËΩΩÊàêÂäü:', {
                                      src: isBase64 ? `Base64ÂõæÁâá (${actualSrc?.length} Â≠óÁ¨¶)` : actualSrc,
                                      width: target.naturalWidth,
                                      height: target.naturalHeight,
                                      alt: target.alt,
                                      usedImageId: src?.startsWith('img_')
                                    });
                                    
                                    // ÁßªÈô§‰ªª‰ΩïÈîôËØØÊèêÁ§∫
                                    const errorPlaceholder = target.parentElement?.querySelector('.image-error-placeholder');
                                    if (errorPlaceholder) {
                                      errorPlaceholder.remove();
                                    }
                                  }}
                                  loading="lazy"
                                />
                              </div>
                            );
                          },
                          h1: ({node, children, ...props}) => (
                            <h1 id={`heading-${children?.toString().toLowerCase().replace(/[^\w\u4e00-\u9fa5]+/g, '-')}`} {...props}>
                              {children}
                            </h1>
                          ),
                          h2: ({node, children, ...props}) => (
                            <h2 id={`heading-${children?.toString().toLowerCase().replace(/[^\w\u4e00-\u9fa5]+/g, '-')}`} {...props}>
                              {children}
                            </h2>
                          ),
                          h3: ({node, children, ...props}) => (
                            <h3 id={`heading-${children?.toString().toLowerCase().replace(/[^\w\u4e00-\u9fa5]+/g, '-')}`} {...props}>
                              {children}
                            </h3>
                          ),
                          h4: ({node, children, ...props}) => (
                            <h4 id={`heading-${children?.toString().toLowerCase().replace(/[^\w\u4e00-\u9fa5]+/g, '-')}`} {...props}>
                              {children}
                            </h4>
                          ),
                          h5: ({node, children, ...props}) => (
                            <h5 id={`heading-${children?.toString().toLowerCase().replace(/[^\w\u4e00-\u9fa5]+/g, '-')}`} {...props}>
                              {children}
                            </h5>
                          ),
                          h6: ({node, children, ...props}) => (
                            <h6 id={`heading-${children?.toString().toLowerCase().replace(/[^\w\u4e00-\u9fa5]+/g, '-')}`} {...props}>
                              {children}
                            </h6>
                          ),
                        }}
                      >
                        {markdown}
                      </ReactMarkdown>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {!zen && (
        <div className="footer">
          <div>Âø´Êç∑ÈîÆÔºöCtrl+S ‰øùÂ≠ò ‚Ä¢ Ctrl+B Âä†Á≤ó ‚Ä¢ Ctrl+I Êñú‰Ωì ‚Ä¢ Ctrl+K ÈìæÊé• ‚Ä¢ Ctrl+E AIÂ§ÑÁêÜ ‚Ä¢ Ctrl+N Êñ∞Âª∫ ‚Ä¢ Ctrl+D ÊñáÊ°£ÂàóË°® ‚Ä¢ Ctrl+, ËÆæÁΩÆ ‚Ä¢ F1 Â∏ÆÂä©</div>
          <div>AIÊîπÂÜôÔºöCtrl+Shift+A Â≠¶ÊúØ ‚Ä¢ Ctrl+Shift+C ÂàõÊÑè ‚Ä¢ Ctrl+Shift+S ÁÆÄÊ¥Å ‚Ä¢ Ctrl+Shift+B ÂïÜÂä° ‚Ä¢ Ctrl+Shift+F ÂèãÂ•Ω ‚Ä¢ Ctrl+Shift+T ÊäÄÊúØ</div>
          <div>Êú¨Âú∞Ëá™Âä®‰øùÂ≠ò ‚Ä¢ Êó†ÊâìÊâ∞ÂÜô‰Ωú ‚Ä¢ {documents.length} ‰∏™ÊñáÊ°£ ‚Ä¢ ÊîØÊåÅÊãñÊãΩ‰∏ä‰º† ‚Ä¢ ESCÈÄÄÂá∫Á¶ÖÊ®°Âºè</div>
        </div>
      )}
    </div>
  );
}